<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker + win10初体验</title>
    <link href="/archives/78938ab7.html"/>
    <url>/archives/78938ab7.html</url>
    
    <content type="html"><![CDATA[<h1 id="docker-win10运行"><a href="#docker-win10运行" class="headerlink" title="docker win10运行"></a>docker win10运行</h1><h2 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h2><h3 id="docker是什么？"><a href="#docker是什么？" class="headerlink" title="docker是什么？"></a><strong>docker是什么？</strong></h3><p>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p><h3 id="docker特点"><a href="#docker特点" class="headerlink" title="docker特点"></a><strong>docker特点</strong></h3><p>作为一种新兴的虚拟化方式，<code>Docker</code> 跟传统的虚拟化方式相比具有众多的优势。</p><blockquote><p>更高效的利用系统资源</p><p>更快速的启动时间</p><p>一致的运行环境</p><p>持续交付和部署</p><p>更轻松的迁移</p><p>更轻松的维护和扩展</p></blockquote><h3 id="docker-VS-虚拟化"><a href="#docker-VS-虚拟化" class="headerlink" title="docker VS 虚拟化"></a><strong>docker VS 虚拟化</strong></h3><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>较小（MB级别）</td><td>较大（GB级别）</td></tr><tr><td>性能</td><td>接近于宿主机</td><td>弱于宿主机</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table><h3 id="docker架构"><a href="#docker架构" class="headerlink" title="docker架构"></a><strong>docker架构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210826113344.png"></p><p><strong>Docker</strong> 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 <code>Docker</code> 技术比虚拟机技术更为轻便、快捷。</p><h2 id="docker组件介绍"><a href="#docker组件介绍" class="headerlink" title="docker组件介绍"></a>docker组件介绍</h2><p><strong>Docker</strong> 包括三个基本概念</p><ul><li><strong>镜像</strong>（<code>Image</code>）</li><li><strong>容器</strong>（<code>Container</code>）</li><li><strong>仓库</strong>（<code>Repository</code>）</li></ul><p><strong>镜像</strong> 是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 <strong>不包含</strong> 任何动态数据，其内容在构建之后也不会被改变。</p><p><strong>容器</strong>的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 <a href="https://en.wikipedia.org/wiki/Linux_namespaces">命名空间</a>。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。</p><p><strong>镜像</strong>（<code>Image</code>）和<strong>容器</strong>（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p><strong>仓库</strong>是一个集中的存储、分发镜像的服务</p><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p><a href="https://docs.docker.com/desktop/windows/install/">Docker Desktop on Windows</a>支持 64 位版本的 Windows 10 Pro，且必须开启 Hyper-V（若版本为 v1903 及以上则无需开启 Hyper-V），或者 64 位版本的 Windows 10 Home v1903 及以上版本。</p><h3 id="安装（手动下载安装）"><a href="#安装（手动下载安装）" class="headerlink" title="安装（手动下载安装）"></a>安装（手动下载安装）</h3><p>点击以下 [链接](<a href="https://desktop.docker.com/win/stable/amd64/Docker">https://desktop.docker.com/win/stable/amd64/Docker</a> Desktop Installer.exe) 下载 Docker Desktop for Windows。</p><p>下载好之后双击 <code>Docker Desktop Installer.exe</code> 开始安装。</p><blockquote><p>注：建议在 WSL2 运行 Docker</p></blockquote><p>系统要求：Windows 版本为 Windows 10 专业版或家庭版 v1903 及以上版本</p><p><strong>windows配置WSL2步骤</strong></p><ol><li><p>启用 Linux 的 Windows 子系统（以管理员运行cmd终端）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">dism.exe /online /<span class="hljs-built_in">enable-feature</span> /featurename:Microsoft<span class="hljs-literal">-Windows</span><span class="hljs-literal">-Subsystem</span><span class="hljs-literal">-Linux</span> /all /norestart<br></code></pre></td></tr></table></figure></li><li><p>检查系统版本</p><p><strong>Windows 徽标密钥 + R，</strong>类型<strong>winver，</strong>选择**”确定**”。<a href="ms-settings:windowsupdate">更新到</a>“设置”菜单中的最新 Windows 版本。</p></li><li><p>启用虚拟化功能</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">dism.exe /online /<span class="hljs-built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart<br></code></pre></td></tr></table></figure></li><li><p>下载 Linux 内核更新包，并安装</p><p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">WSL2 Linux 内核更新包，用于 x64 机器</a></p></li><li><p>设置WSL2为默认版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl -<span class="hljs-literal">-set</span><span class="hljs-literal">-default</span><span class="hljs-literal">-version</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p>安装您所选择的 Linux 分发</p><p>打开微软商店，搜索你喜欢的linux版本及类型，如ubuntu</p></li><li><p>创建一个用户帐户和密码为Linux</p></li></ol><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>在 Windows 搜索栏输入 <strong>Docker</strong> 点击 <strong>Docker Desktop</strong> 开始运行。</p><h3 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h3><p>国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。国内很多云服务商都提供了国内加速器服务，例如：</p><ul><li><a href="https://www.aliyun.com/product/acr?source=5176.11533457&userCode=8lx5zmtu">阿里云加速器(点击管理控制台 -&gt; 登录账号(淘宝账号) -&gt; 右侧镜像工具 -&gt; 镜像加速器 -&gt; 复制加速器地址)</a></li><li><a href="https://www.163yun.com/help/documents/56918246390157312">网易云加速器 <code>https://hub-mirror.c.163.com</code></a></li><li><a href="https://cloud.baidu.com/doc/CCE/s/Yjxppt74z#%E4%BD%BF%E7%94%A8dockerhub%E5%8A%A0%E9%80%9F%E5%99%A8">百度云加速器 <code>https://mirror.baidubce.com</code></a></li></ul><p>配置示例：</p><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210826144830.png"></p><h2 id="docker镜像管理"><a href="#docker镜像管理" class="headerlink" title="docker镜像管理"></a>docker镜像管理</h2><h3 id="镜像实现的基本原理"><a href="#镜像实现的基本原理" class="headerlink" title="镜像实现的基本原理"></a>镜像实现的基本原理</h3><p>每个镜像都由很多层次构成，Docker 使用 <a href="https://en.wikipedia.org/wiki/UnionFS">Union FS</a> 将这些不同的层结合到一个镜像中去。Union FS 将一个只读的分支和一个可写的分支联合在一起，基于此方法可以允许在镜像不变的基础上允许用户在其上进行一些写操作。</p><h3 id="从仓库获取镜像"><a href="#从仓库获取镜像" class="headerlink" title="从仓库获取镜像"></a>从仓库获取镜像</h3><p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">$ docker pull <span class="hljs-comment">[选项]</span> <span class="hljs-comment">[Docker Registry 地址<span class="hljs-comment">[:端口号]</span>/]</span>仓库名<span class="hljs-comment">[:标签]</span><br></code></pre></td></tr></table></figure><p>具体的选项可以通过 <code>docker pull --help</code> 命令看到，这里我们说一下镜像名称的格式。</p><ul><li>Docker 镜像仓库地址：地址的格式一般是 <code>&lt;域名/IP&gt;[:端口号]</code>。默认地址是 Docker Hub(<code>docker.io</code>)。</li><li>仓库名：如之前所说，这里的仓库名是两段式名称，即 <code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于 Docker Hub，如果不给出用户名，则默认为 <code>library</code>，也就是官方镜像。</li></ul><p>示例：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile">$ docker pull ubuntu:18.04<br><span class="hljs-section">18.04: Pulling from library/ubuntu</span><br><span class="hljs-section">92dc2a97ff99: Pull complete</span><br><span class="hljs-section">be13a9d27eb8: Pull complete</span><br><span class="hljs-section">c8299583700a: Pull complete</span><br><span class="hljs-section">Digest: sha256:4bc3ae6596938cb0d9e5ac51a1152ec9dcac2a1c50829c74abd9c4361e321b26</span><br><span class="hljs-section">Status: Downloaded newer image for ubuntu:18.04</span><br><span class="hljs-section">docker.io/library/ubuntu:18.04</span><br></code></pre></td></tr></table></figure><p><code>docker pull</code> 命令的输出结果最后一行给出了镜像的完整名称，即： <code>docker.io/library/ubuntu:18.04</code>。</p><h3 id="管理本地主机镜像"><a href="#管理本地主机镜像" class="headerlink" title="管理本地主机镜像"></a>管理本地主机镜像</h3><p><strong>运行本地镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it --rm ubuntu:18.04 bash<br></code></pre></td></tr></table></figure><ul><li><code>-it</code>：这是两个参数， <code>-i</code>：交互式操作， <code>-t</code> 终端。表示交互式终端。</li><li><code>--rm</code>：容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 <code>docker rm</code>。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 <code>--rm</code> 可以避免浪费空间。</li><li><code>ubuntu:18.04</code>：这是指用 <code>ubuntu:18.04</code> 镜像为基础来启动容器。</li><li><code>bash</code>：放在镜像名后的是 <strong>命令</strong>，这里我们希望有个交互式 Shell，因此用的是 <code>bash</code>。</li></ul><p>通过 <code>exit</code> 退出容器</p><p><strong>列出本地镜像</strong></p><p>使用 <code>docker image ls</code> 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">λ docker image ls<br>REPOSITORY   TAG       IMAGE ID       CREATED       SIZE<br>ubuntu       18.04     39a8cfeef173   4 weeks ago   63.1MB<br></code></pre></td></tr></table></figure><p>列名：<code>仓库名</code>、<code>标签</code>、<code>镜像 ID</code>、<code>创建时间</code> 以及 <code>所占用的空间</code></p><p>列出部分镜像：<code>docker image ls ubuntu</code> 指定仓库名</p><p>列出指定镜像：<code>docker image ls ubuntu:18.04</code> 指定仓库名和标签</p><p>列出某个位置之前的镜像：<code>docker image ls -f before=ubuntu:18.04</code> </p><blockquote><p>过滤器参数 <code>--filter</code>，或者简写 <code>-f</code></p></blockquote><p>列出某个位置之后的镜像：<code>docker image ls -f after=ubuntu:18.04</code></p><p>列出镜像的ID：<code>docker image ls -q</code></p><p>列出镜像ID和仓库名：<code>docker image ls --format &quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;</code></p><p><strong>删除本地镜像</strong></p><p>使用 <code>docker image rm</code> 命令，其格式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></code></pre></td></tr></table></figure><p><code>&lt;镜像&gt;</code> 可以是 <code>镜像短 ID</code>、<code>镜像长 ID</code>、<code>镜像名</code> 或者 <code>镜像摘要</code>；因此可以用 ID、镜像名、摘要删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">λ docker image ls<br>REPOSITORY   TAG       IMAGE ID       CREATED       SIZE<br>ubuntu       18.04     39a8cfeef173   4 weeks ago   63.1MB<br></code></pre></td></tr></table></figure><p>使用镜像短ID删除镜像：<code>docker image rm 39a</code>;</p><blockquote><p>默认列出的就已经是短 ID 了，一般取前3个字符以上，只要足够区分于别的镜像就可以了</p></blockquote><p>使用镜像名删除镜像：<code>docker image rm ubuntu</code></p><p>使用镜像摘要删除镜像:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker image ls --digests<br>REPOSITORY   TAG       DIGEST                                                                    IMAGE ID       CREATED       SIZE<br>ubuntu       18.04     sha256:7bd7a9ca99f868bf69c4b6212f64f2af8e243f97ba13abb3e641e03a7ceb59e8   39a8cfeef173   4 weeks ago   63.1MB<br><br>dockers image rm ubuntu@sha256:7bd7a9ca99f868bf69c4b6212f64f2af8e243f97ba13abb3e641e03a7ceb59e8<br></code></pre></td></tr></table></figure><p>删除多个镜像，用<code>docker imager ls</code>配合:</p><p><code>$ docker image rm $(docker image ls -q ubuntu)</code> </p><p><strong>提交镜像</strong></p><p><code>docker commit</code> 命令，可以将容器的存储层保存下来成为镜像</p><p><code>docker commit</code> 的语法格式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker commit \</span><br><span class="bash">    --author <span class="hljs-string">&quot;xxxx&quot;</span> \</span><br><span class="bash">    --message <span class="hljs-string">&quot;修改了默认网页&quot;</span> \</span><br><span class="bash">    webserver \</span><br><span class="bash">    nginx:v2</span><br></code></pre></td></tr></table></figure><p>使用 <code>docker commit</code> 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为 <strong>黑箱镜像</strong>，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。并且任何修改的结果仅仅是在当前层进行标记、添加、修改，而不会改动上一层。如果使用 <code>docker commit</code> 制作镜像，以及后期修改的话，每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢失，会一直如影随形的跟着这个镜像，即使根本无法访问到。这会让镜像更加臃肿。</p><h3 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h3><p><strong>定制镜像</strong></p><p>使用<code>Dockerfile</code>把每一层修改、安装、构建、操作的命令都写入，用这个脚本来构建、定制镜像。</p><p>Dockerfile 是一个文本文件，其内包含了一条条的 **指令(Instruction)**，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> nginx<br><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html</span><br></code></pre></td></tr></table></figure><p>主要包含以下指令：<code>FROM</code>，<code>RUN</code>，<code>COPY</code>, <code>ADD</code>，<code>Dockerfile</code> </p><p> <code>FROM</code> 是指定 <strong>基础镜像</strong>，是定制镜像的基础，因此一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第一条指令。</p><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> nginx<br></code></pre></td></tr></table></figure><blockquote><p>注：Docker 还存在一个特殊的镜像，名为 <code>scratch</code>。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。FROM scratch表明不以任何镜像为基础</p></blockquote><p><code>RUN</code> 指令是用来执行命令行命令的。其格式有两种：</p><ul><li><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 <code>RUN</code> 指令就是这种格式。</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html</span><br></code></pre></td></tr></table></figure><ul><li><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li></ul><blockquote><p>注：不要使用很多个 <code>RUN</code> 一一对应不同的命令，建议使用一个 <code>RUN</code> 指令，并使用 <code>&amp;&amp;</code> 将各个所需命令串联起来。可以简化dockerfile层数。</p><p>Dockerfile 支持 Shell 类的行尾添加 <code>\</code> 的命令换行方式，以及行首 <code>#</code> 进行注释的格式。</p></blockquote><p><code>CMD</code> 指令就是用于指定默认的容器主进程的启动命令的。</p><p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似，也是两种格式：</p><ul><li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li><li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li><li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数。</li></ul><blockquote><p>在指令格式上，一般推荐使用 <code>exec</code> 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 <code>&quot;</code>，而不要使用单引号。</p><p>使用 <code>shell</code> 格式，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行</p><p><code>CMD echo $HOME</code>  —– <code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]</code></p></blockquote><p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p><p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p><blockquote><p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令</p></blockquote><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">18.04</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get update \</span><br><span class="bash">    &amp;&amp; apt-get install -y curl \</span><br><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [ <span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;-s&quot;</span>, <span class="hljs-string">&quot;http://myip.ipip.net&quot;</span> ]</span><br></code></pre></td></tr></table></figure><p><code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。</p><p>格式：</p><ul><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</code></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">COPY</span><span class="bash"> package.json /usr/src/app/</span><br></code></pre></td></tr></table></figure><ul><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">COPY</span><span class="bash"> --chown=55:mygroup files* /mydir/</span><br></code></pre></td></tr></table></figure><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</p><p>在 Docker 官方的 <a href="">Dockerfile 最佳实践文档</a> 中要求，尽可能的使用 <code>COPY</code>，因为 <code>COPY</code> 的语义很明确，就是复制文件而已，而 <code>ADD</code> 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 <code>ADD</code> 的场合，是需要自动解压缩的场合。</p><blockquote><p>如果 <code>&lt;源路径&gt;</code> 为一个 <code>tar</code> 压缩文件的话，压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及 <code>xz</code> 的情况下，<code>ADD</code> 指令将会自动解压缩这个压缩文件到 <code>&lt;目标路径&gt;</code> 去。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> scratch<br><span class="hljs-keyword">ADD</span><span class="bash"> ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /</span><br>...<br></code></pre></td></tr></table></figure><p><code>ENV</code> 设置环境变量</p><p>格式有两种：</p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ul><p>示例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ENV <span class="hljs-attribute">VERSION</span>=1.0 <span class="hljs-attribute">DEBUG</span>=on \<br>    <span class="hljs-attribute">NAME</span>=<span class="hljs-string">&quot;Happy Feet&quot;</span><br></code></pre></td></tr></table></figure><p><code>ARG</code> 构建参数</p><p>格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p><blockquote><p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。<code>docker history</code> 还是可以看到所有值的。</p></blockquote><p>可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 只在 FROM 中生效</span><br><span class="hljs-keyword">ARG</span> DOCKER_USERNAME=library<br><br><span class="hljs-keyword">FROM</span> $&#123;DOCKER_USERNAME&#125;/alpine<br><br><span class="hljs-comment"># 要想在 FROM 之后使用，必须再次指定</span><br><span class="hljs-keyword">ARG</span> DOCKER_USERNAME=library<br><br><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">set</span> -x ; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;DOCKER_USERNAME&#125;</span></span><br></code></pre></td></tr></table></figure><p><code>VOLUME</code> 定义匿名卷</p><p>格式为：</p><ul><li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li><li><code>VOLUME &lt;路径&gt;</code></li></ul><p>示例：<code>VOLUME /data</code></p><p>可以通过 <code>docker run -d -v mydata:/data xxxx</code>覆盖</p><p><code>EXPOSE</code> 暴露端口</p><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></p><blockquote><p><code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code>是不同的。</p><p><code>-p</code>，是映射宿主端口和容器端口</p><p><code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p></blockquote><p><code>WORKDIR</code> 指定工作目录,改变环境状态并影响以后的层</p><p>格式为 <code>WORKDIR &lt;工作目录路径&gt;</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">WORKDIR</span><span class="bash"> /app <span class="hljs-comment">#改变以后各层的工作目录的位置</span></span><br><br><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello&quot;</span> &gt; world.txt</span><br></code></pre></td></tr></table></figure><p>WORKDIR 指令使用的相对路径，那么所切换的路径与之前的 WORKDIR有关</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">WORKDIR</span><span class="bash"> /a</span><br><span class="hljs-keyword">WORKDIR</span><span class="bash"> b</span><br><span class="hljs-keyword">WORKDIR</span><span class="bash"> c</span><br><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">pwd</span></span><br></code></pre></td></tr></table></figure><p><code>RUN pwd</code> 的工作目录为 <code>/a/b/c</code>。</p><p><code>USER</code> 指定当前用户,改变环境状态并影响以后的层</p><p>格式：<code>USER &lt;用户名&gt;[:&lt;用户组&gt;]</code></p><blockquote><p><code>USER</code> 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p></blockquote><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="bash"> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br><span class="hljs-keyword">USER</span> redis<br><span class="hljs-keyword">RUN</span><span class="bash"> [ <span class="hljs-string">&quot;redis-server&quot;</span> ]</span><br></code></pre></td></tr></table></figure><p><code>HEALTHCHECK</code> 健康检查</p><p>格式：</p><ul><li><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>：设置检查容器健康状况的命令</li><li><code>HEALTHCHECK NONE</code>：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</li></ul><p><code>HEALTHCHECK</code> 支持下列选项：</p><ul><li><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li><li><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li><li><code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 <code>unhealthy</code>，默认 3 次。</li></ul><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> nginx<br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="hljs-keyword">HEALTHCHECK</span><span class="bash"> --interval=5s --timeout=3s \</span><br><span class="bash">  CMD curl -fs http://localhost/ || <span class="hljs-built_in">exit</span> 1</span><br></code></pre></td></tr></table></figure><p>再次 <code>docker container ls</code>，健康状态 <code>(healthy)</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ docker container ls<br>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES<br><span class="hljs-number">03</span>e28eb00bd0        myweb:v1            <span class="hljs-string">&quot;nginx -g &#x27;daemon off&quot;</span>   <span class="hljs-number">18</span> seconds ago      Up <span class="hljs-number">16</span> seconds (healthy)   <span class="hljs-number">80</span><span class="hljs-regexp">/tcp, 443/</span>tcp     web<br></code></pre></td></tr></table></figure><p><code>ONBUILD</code> 是一个特殊的指令，它后面跟的是其它指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p><p>格式：<code>ONBUILD &lt;其它指令&gt;</code>。</p><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:slim<br><span class="hljs-keyword">RUN</span><span class="bash"> mkdir /app</span><br><span class="hljs-keyword">WORKDIR</span><span class="bash"> /app</span><br><span class="hljs-keyword">ONBUILD</span> <span class="hljs-keyword">COPY</span><span class="bash"> ./package.json /app</span><br><span class="hljs-keyword">ONBUILD</span> <span class="hljs-keyword">RUN</span><span class="bash"> [ <span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;install&quot;</span> ]</span><br><span class="hljs-keyword">ONBUILD</span> <span class="hljs-keyword">COPY</span><span class="bash"> . /app/</span><br><span class="hljs-keyword">CMD</span><span class="bash"> [ <span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;start&quot;</span> ]</span><br></code></pre></td></tr></table></figure><p><code>LABEL</code> 指令用来给镜像以键值对的形式添加一些元数据（metadata）</p><p>格式：<code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</code></p><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">LABEL</span><span class="bash"> org.opencontainers.image.authors=<span class="hljs-string">&quot;yeasy&quot;</span> </span><br><br><span class="hljs-keyword">LABEL</span><span class="bash"> org.opencontainers.image.documentation=<span class="hljs-string">&quot;https://yeasy.gitbooks.io&quot;</span></span><br></code></pre></td></tr></table></figure><p><code>SHELL</code> 指令可以指定 <code>RUN</code> <code>ENTRYPOINT</code> <code>CMD</code> 指令的 shell，Linux 中默认为 <code>[&quot;/bin/sh&quot;, &quot;-c&quot;]</code></p><p>格式：<code>SHELL [&quot;executable&quot;, &quot;parameters&quot;]</code></p><p><strong>构建镜像</strong></p><p>使用<code>docker build</code> 命令进行镜像构建。其格式为：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker build [选项] &lt;上下文路径/URL/-&gt;<br></code></pre></td></tr></table></figure><p><code>docker build</code> 的工作原理:</p><p>Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 <a href="https://docs.docker.com/develop/sdk/">Docker Remote API</a>，而如 <code>docker</code> 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 <code>docker</code> 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。</p><blockquote><p><code>docker build</code> 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。</p></blockquote><p>从上下文路径构建镜像：<code>docker build -t nginx:v3 .</code></p><blockquote><p>当构建的时候，用户会指定构建镜像上下文的路径，<code>docker build</code> 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。</p></blockquote><p>从URL构建镜像：<code>docker build -t hello-world https://github.com/docker-library/hello-world.git#master:amd64/hello-world</code></p><blockquote><p>指定了构建所需的 Git repo，并且指定分支为 <code>master</code>，构建目录为 <code>/amd64/hello-world/</code>，然后 Docker 就会自己去 <code>git clone</code> 这个项目、切换到指定分支、并进入到指定目录后开始构建。</p></blockquote><p>用给定的 tar 压缩包构建：<code>docker build http://server/context.tar.gz</code></p><blockquote><p>会自动解压缩，以其作为上下文，开始构建</p></blockquote><p>从标准输入中读取 Dockerfile 进行构建：<code>docker build - &lt; Dockerfile</code> 或 <code>cat Dockerfile | docker build -</code></p><p>从标准输入中读取上下文压缩包进行构建：<code>docker build - &lt; context.tar.gz</code></p><p><strong>使用多阶段构建</strong></p><p>可以解决以下问题：</p><ul><li>镜像层次多，镜像体积较大，部署时间变长</li><li>源代码存在泄露的风险</li></ul><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> golang:alpine as builder<br><br><span class="hljs-keyword">RUN</span><span class="bash"> apk --no-cache add git</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="bash"> /go/src/github.com/go/helloworld/</span><br><br><span class="hljs-keyword">RUN</span><span class="bash"> go get -d -v github.com/go-sql-driver/mysql</span><br><br><span class="hljs-keyword">COPY</span><span class="bash"> app.go .</span><br><br><span class="hljs-keyword">RUN</span><span class="bash"> CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span><br><br><span class="hljs-keyword">FROM</span> alpine:latest as prod<br><br><span class="hljs-keyword">RUN</span><span class="bash"> apk --no-cache add ca-certificates</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="bash"> /root/</span><br><br><span class="hljs-keyword">COPY</span><span class="bash"> --from=0 /go/src/github.com/go/helloworld/app .</span><br><br><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;./app&quot;</span>]</span><br></code></pre></td></tr></table></figure><h2 id="docker控制"><a href="#docker控制" class="headerlink" title="docker控制"></a>docker控制</h2><p>新建并启动：<code>docker run</code></p><p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在就从 <a href="">registry</a> 下载</li><li>利用镜像创建并启动一个容器</li><li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li><li>从地址池配置一个 ip 地址给容器</li><li>执行用户指定的应用程序</li><li>执行完毕后容器被终止</li></ul><p>启动已终止容器：<code>docker container start</code></p><p>守护态运行：<code>docker run -d</code></p><blockquote><p>此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 <code>docker container logs [container ID or NAMES]</code> 查看)。</p><p><strong>注：</strong> 容器是否会长久运行，是和 <code>docker run</code> 指定的命令有关，和 <code>-d</code> 参数无关。</p></blockquote><p>终止一个运行中的容器: <code>docker container stop</code> </p><p>终止状态的容器查看 :<code>docker container ls -a</code> </p><p>重新启动终止状态容器：<code>docker container start</code></p><p>进入容器：<code>docker attach</code> 或 <code>docker exec</code></p><blockquote><p>注：docker attach从这个 stdin 中 exit，会导致容器的停止。</p><p>​        docker exec从这个 stdin 中 exit，不会导致容器的停止。</p></blockquote><p>导出本地某个容器：<code>docker export</code> </p><p>从容器快照文件中再导入为镜像：<code>docker import</code> </p><blockquote><p><em>注：用户既可以使用</em> <em><code>docker load</code></em> <em>来导入镜像存储文件到本地镜像库，也可以使用</em> <em><code>docker import</code></em> <em>来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。</em></p></blockquote><p>删除一个处于终止状态的容器：<code>docker container rm</code> </p><p>查看所有已经创建的包括终止状态的容器：<code>docker container ls -a</code> </p><p>清理所有处于终止状态的容器：<code>docker container prune</code></p><h2 id="访问-Docker-Hub"><a href="#访问-Docker-Hub" class="headerlink" title="访问 Docker Hub"></a>访问 <a href="https://hub.docker.com/">Docker Hub</a></h2><p>登录：<code>docker login</code></p><p>登出：<code>docker logout</code></p><p>查找镜像： <code>docker search</code> </p><p>下载镜像： <code>docker pull</code> </p><p>推送镜像： <code>docker push</code></p><h2 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h2><p>容器中管理数据主要有两种方式：</p><ul><li>数据卷（Volumes）</li><li>挂载主机目录 (Bind mounts)</li></ul><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li><code>数据卷</code> 可以在容器之间共享和重用</li><li>对 <code>数据卷</code> 的修改会立马生效</li><li>对 <code>数据卷</code> 的更新，不会影响镜像</li><li><code>数据卷</code> 默认会一直存在，即使容器被删除</li></ul><blockquote><p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p></blockquote><p>创建一个数据卷：<code>docker volume create my-vol</code></p><p>查看所有的 <code>数据卷</code>：<code>docker volume ls</code></p><p>查看指定 <code>数据卷</code> 的信息：<code>docker volume inspect my-vol</code></p><p>创建一个名为 <code>web</code> 的容器，并加载一个 <code>数据卷</code> 到容器的 <code>/usr/share/nginx/html</code> 目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker run -d -P \</span><br><span class="bash">    --name web \</span><br><span class="bash">    <span class="hljs-comment"># -v my-vol:/usr/share/nginx/html \</span></span><br><span class="bash">    --mount <span class="hljs-built_in">source</span>=my-vol,target=/usr/share/nginx/html \</span><br><span class="bash">    nginx:alpine</span><br></code></pre></td></tr></table></figure><p>查看容器的信息: <code>docker inspect web</code></p><p><code>数据卷</code> 信息在 “Mounts” Key 下面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;Mounts&quot;: [<br>    &#123;<br>        &quot;Type&quot;: &quot;volume&quot;,<br>        &quot;Name&quot;: &quot;my-vol&quot;,<br>        &quot;Source&quot;: &quot;/var/lib/docker/volumes/my-vol/_data&quot;,<br>        &quot;Destination&quot;: &quot;/usr/share/nginx/html&quot;,<br>        &quot;Driver&quot;: &quot;local&quot;,<br>        &quot;Mode&quot;: &quot;&quot;,<br>        &quot;RW&quot;: true,<br>        &quot;Propagation&quot;: &quot;&quot;<br>    &#125;<br>],<br></code></pre></td></tr></table></figure><p>删除数据卷: <code>docker volume rm my-vol</code></p><p>在删除容器的同时移除数据卷: <code>docker rm -v</code></p><p>批量清理无用数据卷：<code>docker volume prune</code></p><p>挂载主机目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker run -d -P \</span><br><span class="bash">    --name web \</span><br><span class="bash">    <span class="hljs-comment"># -v /src/webapp:/usr/share/nginx/html \</span></span><br><span class="bash">    --mount <span class="hljs-built_in">type</span>=<span class="hljs-built_in">bind</span>,<span class="hljs-built_in">source</span>=/src/webapp,target=/usr/share/nginx/html \</span><br><span class="bash">    nginx:alpine</span><br></code></pre></td></tr></table></figure><blockquote><p>Docker 挂载主机目录的默认权限是 <code>读写</code>，用户也可以通过增加 <code>readonly</code> 指定为 <code>只读</code>。</p></blockquote><p>挂载一个本地主机文件作为数据卷：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker run --rm -it \</span><br><span class="bash">   <span class="hljs-comment"># -v $HOME/.bash_history:/root/.bash_history \</span></span><br><span class="bash">   --mount <span class="hljs-built_in">type</span>=<span class="hljs-built_in">bind</span>,<span class="hljs-built_in">source</span>=<span class="hljs-variable">$HOME</span>/.bash_history,target=/root/.bash_history \</span><br><span class="bash">   ubuntu:18.04 \</span><br><span class="bash">   bash</span><br><br>root@2affd44b4667:/# history<br>1  ls<br>2  diskutil list<br></code></pre></td></tr></table></figure><h2 id="网络使用"><a href="#网络使用" class="headerlink" title="网络使用"></a>网络使用</h2><p><strong>外部访问容器：</strong></p><p>​    使用 <code>-P</code> 标记时，Docker 会随机映射一个端口到内部容器开放的网络端口，<code>-p</code> 标记可以多次使用来绑定多个端口</p><p>​    使用 <code>docker container ls</code> 可以看到，本地主机的 32768 被映射到了容器的 80 端口</p><p>​    通过 <code>docker logs</code> 命令来查看访问记录。</p><p>映射所有地址接口：<code>docker run -d -p 80:80 nginx:alpine</code></p><p>映射到指定地址的指定端口：<code>docker run -d -p 127.0.0.1:80:80 nginx:alpine</code></p><p>映射到指定地址的任意端口：<code>docker run -d -p 127.0.0.1::80/udp nginx:alpine</code></p><p>查看映射端口配置：<code>docker port</code></p><p><strong>容器互联</strong>：</p><p>新建网络：<code>docker network create -d bridge my-net</code></p><blockquote><p><code>-d</code> 参数指定 Docker 网络类型，有 <code>bridge</code> <code>overlay</code>。其中 <code>overlay</code> 网络类型用于 Swarm mode</p></blockquote><p>连接容器：<code>docker run -it --rm --name busybox1 --network my-net busybox sh</code></p><blockquote><p>如果你有多个容器之间需要互相连接，推荐使用 Docker Compose。</p></blockquote><p><strong>自定义配置容器的主机名和 DNS：</strong></p><p>配置全部容器的 DNS </p><p>Docker 利用虚拟文件来挂载容器的 3 个相关配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> mount</span><br>/dev/disk/by-uuid/1fec...ebdf on /etc/hostname type ext4 ...<br>/dev/disk/by-uuid/1fec...ebdf on /etc/hosts type ext4 ...<br>tmpfs on /etc/resolv.conf type tmpfs ...<br></code></pre></td></tr></table></figure><p>也可以在 <code>/etc/docker/daemon.json</code> 文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;<br>  &quot;dns&quot; : [<br>    &quot;114.114.114.114&quot;,<br>    &quot;8.8.8.8&quot;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>手动指定容器的配置：</p><p>使用 <code>docker run</code> 命令启动容器时加入如下参数：</p><p><code>-h HOSTNAME</code> 或者 <code>--hostname=HOSTNAME</code> 设定容器的主机名，它会被写到容器内的 <code>/etc/hostname</code> 和 <code>/etc/hosts</code>。但它在容器外部看不到，既不会在 <code>docker container ls</code> 中显示，也不会在其他的容器的 <code>/etc/hosts</code> 看到。</p><p><code>--dns=IP_ADDRESS</code> 添加 DNS 服务器到容器的 <code>/etc/resolv.conf</code> 中，让容器用这个服务器来解析所有不在 <code>/etc/hosts</code> 中的主机名。</p><p><code>--dns-search=DOMAIN</code> 设定容器的搜索域，当设定搜索域为 <code>.example.com</code> 时，在搜索一个名为 host 的主机时，DNS 不仅搜索 host，还会搜索 <code>host.example.com</code>。</p><blockquote><p>注意：如果在容器启动时没有指定最后两个参数，Docker 会默认用主机上的 <code>/etc/resolv.conf</code> 来配置容器。</p></blockquote><p><strong>容器访问控制</strong></p><p>通过iptables实现，在启动 Docker 服务的时候设定 <code>--ip-forward=true</code>, Docker 就会自动设定系统的 <code>ip_forward</code> 参数为 1</p><p>容器间访问，默认情况下，所有容器都会被连接到 <code>docker0</code> 网桥上，默认配置<code>--icc=true</code>（缺省值）是允许网络互通的。</p><blockquote><p>在通过 <code>-icc=false</code> 关闭网络访问后，还可以通过 <code>--link=CONTAINER_NAME:ALIAS</code> 选项来访问容器的开放端口</p><p> <code>CONTAINER_NAME</code> 目前必须是 Docker 分配的名字，或使用 <code>--name</code> 参数指定的名字。主机名则不会被识别。</p></blockquote><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p><code>Docker Compose</code> 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用。</p><p><code>Compose</code> 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」。<code>Compose</code> 中有两个重要的概念：</p><ul><li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li></ul><p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><p>默认下载docker会安装；无需重新下载；</p><p>docker compose版本查看：<code>docker-compose --version</code></p><p><strong>卸载</strong>    </p><p>​        二进制文件安装: <code>sudo rm /usr/local/bin/docker-compose</code></p><p>​        <code>pip</code> 安装: <code>sudo pip uninstall docker-compose</code></p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">docker-compose.yml 文件</span><br>version: &#x27;3&#x27;<br>services:<br><br>  web:<br>    build: .<br>    ports:<br>     - &quot;5000:5000&quot;<br><br>  redis:<br>    image: &quot;redis:alpine&quot;<br><span class="hljs-meta">#</span><span class="bash">运行 compose 项目</span><br>docker-compose up<br></code></pre></td></tr></table></figure><h2 id="swarm-mode"><a href="#swarm-mode" class="headerlink" title="swarm mode"></a>swarm mode</h2><p><code>Swarm</code> 是使用 <a href="https://github.com/docker/swarmkit/"><code>SwarmKit</code></a> 构建的 Docker 引擎内置（原生）的集群管理和编排工具。</p><p>节点：运行 Docker 的主机可以主动初始化一个 <code>Swarm</code> 集群或者加入一个已存在的 <code>Swarm</code> 集群，这样这个运行 Docker 的主机就成为一个 <code>Swarm</code> 集群的节点 。又分为管理节点和工作节点；</p><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210831160644.png"></p><p>任务 （<code>Task</code>）是 <code>Swarm</code> 中的最小的调度单位，目前来说就是一个单一的容器。</p><p>服务 （<code>Services</code>） 是指一组任务的集合，服务定义了任务的属性。</p><p>示例：docker compose部署wordpress</p><p>编写test.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br><br>   <span class="hljs-attr">db:</span><br>     <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8.0</span><br>     <span class="hljs-attr">command:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--default_authentication_plugin=mysql_native_password</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--character-set-server=utf8mb4</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--collation-server=utf8mb4_unicode_ci</span>     <br>     <span class="hljs-attr">volumes:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">db_data:/var/lib/mysql</span><br>     <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>     <span class="hljs-attr">environment:</span><br>       <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">somewordpress</span><br>       <span class="hljs-attr">MYSQL_DATABASE:</span> <span class="hljs-string">wordpress</span><br>       <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">wordpress</span><br>       <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">wordpress</span><br><br>   <span class="hljs-attr">wordpress:</span><br>     <span class="hljs-attr">depends_on:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>     <span class="hljs-attr">image:</span> <span class="hljs-string">wordpress:latest</span><br>     <span class="hljs-attr">ports:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8000:80&quot;</span><br>     <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>     <span class="hljs-attr">environment:</span><br>       <span class="hljs-attr">WORDPRESS_DB_HOST:</span> <span class="hljs-string">db:3306</span><br>       <span class="hljs-attr">WORDPRESS_DB_USER:</span> <span class="hljs-string">wordpress</span><br>       <span class="hljs-attr">WORDPRESS_DB_PASSWORD:</span> <span class="hljs-string">wordpress</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">db_data:</span><br></code></pre></td></tr></table></figure><p>启动 docker compose -d up；直接可以访问localhost：8000</p><p>有了compose以后可以告别docker run命令了，以项目为单位管理，省去很多麻烦。</p>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PicGo+GitHub图床</title>
    <link href="/archives/826499a4.html"/>
    <url>/archives/826499a4.html</url>
    
    <content type="html"><![CDATA[<h2 id="GitHub新建仓库"><a href="#GitHub新建仓库" class="headerlink" title="GitHub新建仓库"></a>GitHub新建仓库</h2><ol><li><p>创建GitHub图床之前，需要注册/登陆GitHub账号</p></li><li><p>创建Repository</p><p>点击”New repository”按钮</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210831095825.png"></p><p>​    3. 生成一个Token用于操作GitHub repository</p><p>​    回到主页，点击”Settings”按钮</p><p>​    进入页面后，点击”Developer settings”按钮</p><p>​    点击”Personal access tokens”按钮</p><p>​    <a href="https://github.com/settings/tokens">Personal Access Tokens (github.com)</a></p><p>​    填写描述，选择”repo”权限，然后点击”Generate token”按钮<img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210831101529.png"></p><h2 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h2><ol><li><p>下载安装并运行PicGo</p></li><li><p>配置图床</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210831101650.png"></p><p>第一行设定仓库名按照“账户名/仓库名的格式填写”</p><p>第二行分支名填写“master”或”main“，看自己仓库设置</p><p>第三行将之前的Token粘贴在这里</p><p>第四行填写仓库下的文件夹名称</p><p>第五行自定义域名的作用是在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接，放到剪切板上，自定义域名需要按照这样去填写：<a href="https://raw.githubusercontent.com/%E8%B4%A6%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D/master%EF%BC%8C">https://raw.githubusercontent.com/账户名/仓库名/master，</a></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux升级NVIDIA显卡驱动</title>
    <link href="/archives/d996c1ea.html"/>
    <url>/archives/d996c1ea.html</url>
    
    <content type="html"><![CDATA[<ol><li><p>下载对应版本的驱动</p><p><a href="https://www.nvidia.com/Download/index.aspx?lang=en-us">Download Drivers | NVIDIA</a></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210830154208.png"></p><ol start="2"><li><p>卸载已有驱动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">NVIDIA-Linux-x86_64-418.81.01.run --uninstall<br></code></pre></td></tr></table></figure><p>注：</p><blockquote><p>如果提示：<code>./nvidia-installer: unrecognized option: &quot;--unistall&quot;</code></p><p>使用<code>nvidia-unistall</code>卸载已有驱动</p></blockquote></li><li><p>进入文本模式</p><p><code>init 3</code></p><p>否则会报 <code>ERROR: You appear to be running an X server; please exit X before installing.    </code> </p></li><li><p>重启服务器</p><p>卸载旧驱动后还会有组件再被使用，可能会报 <code>An NVIDIA kernel module &#39;nvidia-uvm&#39; appears to already be loaded in your kernel.</code>，简单的解决方法是重启服务器。</p></li><li><p>安装新驱动</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">NVIDIA</span>-Linux-x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>-<span class="hljs-number">470</span>.<span class="hljs-number">57</span>.<span class="hljs-number">02</span>.run<br></code></pre></td></tr></table></figure></li><li><p>检查是否正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@cn050 ~]# nvidia-smi <br>Mon Aug 30 15:10:45 2021       <br>+-----------------------------------------------------------------------------+<br>| NVIDIA-SMI 470.57.02    Driver Version: 470.57.02    CUDA Version: 11.4     |<br>|-------------------------------+----------------------+----------------------+<br>| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |<br>| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |<br>|                               |                      |               MIG M. |<br>|===============================+======================+======================|<br>|   0  Tesla T4            Off  | 00000000:2F:00.0 Off |                    0 |<br>| N/A   77C    P0    32W /  70W |      0MiB / 15109MiB |      0%      Default |<br>|                               |                      |                  N/A |<br>+-------------------------------+----------------------+----------------------+<br>                                                                               <br>+-----------------------------------------------------------------------------+<br>| Processes:                                                                  |<br>|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |<br>|        ID   ID                                                   Usage      |<br>|=============================================================================|<br>|  No running processes found                                                 |<br>+-----------------------------------------------------------------------------+<br></code></pre></td></tr></table></figure></li><li><p>恢复图形界面</p><p><code>init 5</code></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图形计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win10 + docker使用mysql</title>
    <link href="/archives/87fb5dac.html"/>
    <url>/archives/87fb5dac.html</url>
    
    <content type="html"><![CDATA[<p>目的：win10 + docker部署mysql，使用navicate连接数据库并使用</p><h2 id="安装部署mysql"><a href="#安装部署mysql" class="headerlink" title="安装部署mysql"></a>安装部署mysql</h2><ol><li><p>拉取MySQL镜像</p><p>查找Docker Hub上的mysql镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker search mysql</span><br></code></pre></td></tr></table></figure><p>建议指定标签,默认自动拉取最新版本镜像（8.0）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker pull mysql:5.6</span><br></code></pre></td></tr></table></figure><p>等待下载完成后，我们就可以在本地镜像列表里查到REPOSITORY为mysql,标签为5.6的镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker image ls</span><br>REPOSITORY   TAG       IMAGE ID       CREATED       SIZE<br>mysql        5.6       7f8929383df0   2 weeks ago   303MB<br></code></pre></td></tr></table></figure><p><strong>从这里可以看出空间没节省多少。。</strong></p></li><li><p>创建并启动一个MySQL容器</p><p>创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker run --name mysql-learning -e MYSQL_ROOT_PASSWORD=<span class="hljs-built_in">test</span> -p 3306:3306 -d mysql:5.6</span><br></code></pre></td></tr></table></figure><p>查看容器运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker ps</span><br>CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS         PORTS                                       NAMES<br>69e72dbe39b5   mysql:5.6   &quot;docker-entrypoint.s…&quot;   9 seconds ago   Up 7 seconds   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp   mysql-learning<br></code></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker <span class="hljs-built_in">exec</span> -it mysql-learning bash</span><br>root@69e72dbe39b5:/# mysql -uroot -ptest<br>Warning: Using a password on the command line interface can be insecure.<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 1<br>Server version: 5.6.51 MySQL Community Server (GPL)<br><br>Copyright (c) 2000, 2021, Oracle and/or its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br><span class="hljs-meta"></span><br><span class="hljs-meta">mysql&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="navicate连接数据库"><a href="#navicate连接数据库" class="headerlink" title="navicate连接数据库"></a>navicate连接数据库</h2><p>在宿主机上使用navicate客户端连接容器内的数据库</p><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210901155851.png"></p><p>​    主机：localhost，<strong>无法使用容器内地址</strong></p><p>​    端口号:映射的端口号,在创建容器的时候就配置了</p><p>​    用户名:root</p><p>​    密码:创建时配置的</p><blockquote><p><strong>注：</strong>目前不支持win与linux容器使用桥接通信：<a href="https://docs.docker.com/desktop/windows/networking/">Windows | 的 Docker 桌面中的网络功能码头文件</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZFS存储配置---文件服务</title>
    <link href="/archives/daa27d8e.html"/>
    <url>/archives/daa27d8e.html</url>
    
    <content type="html"><![CDATA[<h1 id="文件服务配置—ZFS"><a href="#文件服务配置—ZFS" class="headerlink" title="文件服务配置—ZFS"></a><strong>文件服务配置—ZFS</strong></h1><h2 id="ZFS简介"><a href="#ZFS简介" class="headerlink" title="ZFS简介"></a>ZFS简介</h2><p>　　<strong>1、什么是zfs文件系统</strong></p><p>　　　　ZFS文件系统的英文名称为Zettabyte File System,也叫动态文件系统（Dynamic File System）,是第一个128位文件系统。最初是由Sun公司为Solaris 10操作系统开发的文件系统。作为OpenSolaris开源计划的一部分，ZFS于2005年11月发布，被Sun称为是终极文件系统，经历了 10 年的活跃开发。而最新的开发将全面开放，并重新命名为 OpenZFS。</p><p>　　<strong>2、ZFS具有三个主要涉及目标</strong></p><p>　　　　数据完整性：所有数据都包括数据的校验和。写入数据时，将计算并写入校验和。以后再读回该数据时，将再次计算校验和。如果校验和不匹配，则检测到数据错误。 当数据冗余可用时，ZFS将尝试自动更正错误。</p><p>　　　　池存储：将物理存储设备添加到池中，并从该共享池中分配存储空间。所有文件系统都可以使用空间，可以通过向池中添加新的存储设备来增加空间。</p><p>　　　　性能：多种缓存机制可提高性能。 ARC是基于内存的高级读取缓存。可以在L2ARC中添加基于磁盘的第二级读取缓存 ，并在ZIL中提供基于磁盘的同步写入缓存 。</p><p>　　<strong>3、ZFS与其他文件系统有什么不同？</strong></p><p>　　　　ZFS与以前的任何文件系统都有显着不同，因为ZFS不仅仅是文件系统。将传统上独立的卷管理器和文件系统角色结合在一起，为ZFS提供了独特的优势。文件系统现在知道了磁盘的基础结构。传统文件系统一次只能在单个磁盘上创建。如果有两个磁盘，则必须创建两个单独的文件系统。在传统的硬件RAID中在配置中，通过为操作系统提供由多个物理磁盘提供的空间组成的单个逻辑磁盘，可以避免此问题，操作系统在其上面放置了文件系统。即使在像GEOM提供的软件RAID解决方案 的情况下， 位于RAID转换之上的UFS文件系统也认为它正在处理单个设备。 ZFS的卷管理器和文件系统的组合解决了这个问题，并允许创建许多共享可用存储池的文件系统。ZFS的最大优势之一对磁盘物理布局的了解是，当将其他磁盘添加到池中时，现有文件系统可以自动增长。然后，此新空间可用于所有文件系统。 ZFS还具有可应用于每个文件系统的许多不同属性，与创建单个文件系统相比，创建多个不同文件系统和数据集具有许多优势。　　</p><h2 id="ZFS特性术语"><a href="#ZFS特性术语" class="headerlink" title="ZFS特性术语"></a>ZFS特性术语</h2><p><strong>1、ZFS特性概况</strong></p><blockquote><p>存储池</p><p>写时拷贝 copy-on-write</p><p>快照</p><p>数据完整性验证和自动修复</p><p>RAID-Z</p><p>最大单个文件大小为 16 EB（1 EB = 1024 PB）</p><p>最大 256 千万亿（256*1015 ）的 ZB（1 ZB = 1024 EB）的存储</p></blockquote><p><strong>2、存储池</strong></p><p>ZFS结合了文件系统和卷管理器特性，与其他文件系统不同，ZFS可以创建跨越一系列硬盘或池的文件系统，还可以通过添加硬盘来增大池的存储容量，ZFS可以进行分区和格式化</p><p>　　　　一个池由一个或多个vdev组成</p><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210823172641.png"></p><p><strong>3、写时复制技术</strong></p><p>与传统文件系统不同，当在ZFS上覆盖数据室，新数据将被写入不同的块，而不是原地覆盖，仅在完成写入后，才更新元数据以指向新位置，如果发生大体量写入发送断电或系统崩溃，文件的整个原始内容仍然可用，并且不完整的写入将被丢弃，这也意味这意外关闭后，ZFS不需要运行fsck来检查和修复文件系统。</p><p><strong>4、快照</strong></p><p>写时复制使得 ZFS 有了另一个特性： 快照(snapshots)。ZFS 使用快照来跟踪文件系统中的更改。 快照 包含文件系统的原始版本（文件系统的一个只读版本），实时文件系统则包含了自从快照创建之后的任何更改。没有使用额外的空间。因为新数据将会写到实时文件系统新分配的块上。如果一个文件被删除了，那么它在快照中的索引也会被删除。所以，快照主要是用来跟踪文件的更改，而不是文件的增加和创建。</p><p>快照可以挂载成只读的，以用来恢复一个文件的过去版本。实时文件系统也可以回滚到之前的快照。回滚之后，自从快照创建之后的所有更改将会丢失。</p><p><strong>5、数据完整性验证和自动修复</strong></p><p>当向 ZFS 写入新数据时，会创建该数据的校验和允许将文件系统分叉为新的数据集。在读取数据的时候，使用校验和进行验证。如果前后校验和不匹配，那么就说明检测到了错误，然后，ZFS 会尝试从任何的冗余（RAID-Z或镜像）中恢复数据，验证命令为scrub。</p><p><strong>6、重复数据删除</strong></p><p>checksums的使用使得检测重复数据成为可能，通过重复数据删除，可增加现有相同块的参考计数，从而节省存储空间，为了检测重复块，重复数据删除表（DDT）被保留在内存中，该表包含了唯一的校验和，写入数据时，将计数校验和并将其与表进行比较，如果匹配，就使用该块，但DDT会消耗内存，一般1TB重复数据删除需要5-6GB的内存，影响性能，所以可以使用L2ARC存储DDT，从而提供中间地带，还有不考虑内存和磁盘的话，可以考虑压缩来解决空格键，从而无需额外的内存。</p><p><strong>7、数据集</strong></p><p>ZFS文件系统，卷，快照或克隆的通用术语，每个数据据都有一个格式唯一的名称<code>poolname/path@snapshot</code> </p><p><strong>8、RAIDZ</strong></p><p>ZFS不需要任何额外软件或硬件就可以处理RAID，这个就是RAID-Z，RAID-Z是RAID-5的一个变种，不过它克服了RAID-5的写漏洞（意外重启，数据和校验不同步，条带写入数据时发送意外断电，奇偶校验将跟部分数据不同步，前面写入的无效），RAID-Z使用了可变宽的RAID条带技术，因此所有的写都是全条带写入。RAID-Z有三个级别RAID-Z1、RAID-Z2、RAID-Z3。</p><blockquote><p>三个级别：</p><p>RAIDZ1：与RAID5类似，一重机构校验，至少需要三块磁盘；</p><p>RAIDZ2：与RAID6类似，双重奇偶校验，至少需要四个磁盘；</p><p>RAIDZ3：ZFS特有的，三重奇偶校验，至少需要5个磁盘；</p></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><p>官方网页：<a href="https://zfsonlinux.org/">OpenZFS on Linux</a></p><p>最新版本：<a href="https://github.com/zfsonlinux/zfs/releases/download/zfs-0.8.4/zfs-0.8.4.tar.gz">https://github.com/zfsonlinux/zfs/releases/download/zfs-0.8.4/zfs-0.8.4.tar.gz</a></p></blockquote><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><blockquote><p>建议硬件升级阵列卡微码和驱动</p><p>ZFS版本到官方网站下载最新</p></blockquote><h3 id="设置本地yum-源"><a href="#设置本地yum-源" class="headerlink" title="设置本地yum 源"></a>设置本地yum 源</h3><p>搭建一个 本地的 YUM 源，在 /etc/yum.repos.d/ 创建一个 local.repo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/yum.repos.d/ <br>touch local.repo<br></code></pre></td></tr></table></figure><p>将把下载的软件包加压到 /mnt/source，local.repo内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[local]<br><br>name=local<br><br>baseurl=file:///mnt/source<br><br>gpgcheck=0<br><br>enabled=1<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210823170459.png"></p><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>需要首先安装 kernel-devel 包.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install kernel-devel<br>yum install zfs<br></code></pre></td></tr></table></figure><blockquote><p>如果提示 未加载 zfs 文件系统，加载 zfs 文件系统 <code>/sbin/modprobe zfs</code></p></blockquote><h2 id="创建和管理磁盘资源"><a href="#创建和管理磁盘资源" class="headerlink" title="创建和管理磁盘资源"></a>创建和管理磁盘资源</h2><h3 id="创建zpool"><a href="#创建zpool" class="headerlink" title="创建zpool"></a>创建zpool</h3><p>假设 sda 为 OS 盘。 请检查你的系统 OS盘的盘符。 不要使用 OS 盘符。推荐36个硬盘，组建2个 raidz2 （raid6）的 磁盘组。 并保留 4个盘作为热备盘。</p><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210824113200.png"></p><blockquote><p> 注意，pool的名字 会作为默认的挂载点。</p></blockquote><p>如果需要两个pool，可以使用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">zpool create **naspool1** raidz2 sdb sdc sdd sde sdf sdg sdh sdi sdj sdk sdl sdm sdn sdo sdp sdq spare sdr sds <br><br>zpool create **naspool2** raidz2 sdv sdw sdx sdy sdz sdaa sdab sdac sdad sdae sdaf sdag sdah sdai sdaj sdak spare sdt sdu<br></code></pre></td></tr></table></figure><p>如果只需要一个 pool，可以使用命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">zpool</span> add **naspool<span class="hljs-number">1</span>** raidz<span class="hljs-number">2</span> sdv sdw sdx sdy sdz sdaa sdab sdac sdad sdae sdaf sdag sdah sdai sdaj sdak spare sdt sdu<br></code></pre></td></tr></table></figure><p>pool 创建完成后，会自动在/ 目录挂载：</p><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210823171251.png"></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs tap"> [root@localhost etc]<span class="hljs-comment"># zpool status</span><br><br> pool: naspool1<br><br> state: ONLINE<br><br> scan: none requested<br><br>config:<br><br> <br><br>​    NAME    STATE   READ WRITE CKSUM<br><br>​    naspool1  ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​     raidz2-0 ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdb   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdc   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdd   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sde   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdf   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdg   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdh   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdi   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdj   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdk   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdl   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdm   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdn   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdo   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdp   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdq   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​     raidz2-1 ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdv   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdw   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdx   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdy   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdz   ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdaa  ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdab  ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdac  ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdad  ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdae  ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdaf  ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdag  ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdah  ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdai  ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdaj  ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​      sdak  ONLINE   <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br><br>​    spares<br><br>​     sdr    AVAIL<br><br>​     sds    AVAIL<br><br>​     sdt    AVAIL<br><br>​     sdu    AVAIL<br><br>[root@localhost etc]<span class="hljs-comment"># zpool list</span><br><br>NAME    SIZE ALLOC  FREE CKPOINT EXPANDSZ  FRAG  CAP DEDUP  HEALTH ALTROOT<br><br>naspool1  318G 6.92M  318G    -     -   0%   0% 1.00x  ONLINE -<br> <br></code></pre></td></tr></table></figure><p>删除一个 pool：<code>zpool destroy -f</code> </p><h3 id="修改-zfs-挂载点"><a href="#修改-zfs-挂载点" class="headerlink" title="修改 zfs 挂载点"></a>修改 zfs 挂载点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">zfs umount -a<br>zfs set mountpoint=/zfsroot/naspool1 naspool1<br>zfs mount -a<br></code></pre></td></tr></table></figure><h2 id="设置NFS共享"><a href="#设置NFS共享" class="headerlink" title="设置NFS共享"></a>设置NFS共享</h2><p>本次采用的是单独的 NFS服务。</p><p>修改 nfs 配置文件如下： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/exports<br><br>/naspool1 *(rw,no_root_squash)<br></code></pre></td></tr></table></figure><p> <strong>如果有防火墙问题，请参考</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --permanent --add-service=nfsfirewall-cmd --reload<br></code></pre></td></tr></table></figure><p><strong>如果重启后 没有自动挂载 zfs 文件系统，可以通过手动加载：</strong> </p><p>重启后 导入 pool：<code>zpool import</code></p><p>修改 rc.local 可以自动挂载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">给/etc/rc.local增加可执行权限。chmod +x /etc/rc.localvim /etc/rc.local<span class="hljs-comment">#在/etc/rc.local增加 reboot nfs 的命令systemctl restart nfs</span></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210823171928.png"></p><h2 id="Vmware-数据存储示例"><a href="#Vmware-数据存储示例" class="headerlink" title="Vmware 数据存储示例"></a>Vmware 数据存储示例</h2><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210823172023.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210823172047.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210823172108.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210823172207.png"></p><p> <img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210823172233.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/20210823172252.png"></p>]]></content>
    
    
    <categories>
      
      <category>存储配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ZFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github上更新自己Fork的库</title>
    <link href="/archives/e9c5978b.html"/>
    <url>/archives/e9c5978b.html</url>
    
    <content type="html"><![CDATA[<h1 id="Github上更新自己Fork的库"><a href="#Github上更新自己Fork的库" class="headerlink" title="Github上更新自己Fork的库"></a>Github上更新自己Fork的库</h1><p>1.从原库Fork到自己的仓库。</p><p>2.将Fork库Clone到到本地。如：</p><blockquote><p>原库：<a href="https://github.com/cuizichenghome/MyWebAPP">https://github.com/cuizichenghome/MyWebAPP</a><br>Fork库：<a href="https://github.com/Ah-yuan/MyWebAPP">https://github.com/Ah-yuan/MyWebAPP</a></p></blockquote><p>3、将Fork库Clone到本地：</p><blockquote><p>git clone <a href="http://gitlab.henu.edu.cn/zhanglin/sport_meeting.git">http://gitlab.henu.edu.cn/zhanglin/sport_meeting.git</a></p></blockquote><p>4.将更新后的本地库通过add，commit，push，一条龙服务上传到自己的Fork库，实现对Fork库的更新</p><blockquote><p>1）git add .</p><p>2）git commit -m “描述”</p><p>3）git push origin master #这里push到的是Fork库的master，origin是Fork远程仓库的别名，是默认的<br>这样就更新了远程fork库。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫猫眼前100</title>
    <link href="/archives/48108407.html"/>
    <url>/archives/48108407.html</url>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><blockquote><p><strong>通过python爬取猫眼Top 100电影信息，包含排名、电影名称、参演人员、上映时间、封面图；并将获取的数据写入数据库；</strong></p></blockquote><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><blockquote><p>解析网址信息—-&gt;xpath获取排名等信息—-&gt;存储数据到数据库</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始抓取数据...&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>):<br>        index = index_page(i)<span class="hljs-comment">#解析网址信息</span><br>        results = parse_pages(index)<span class="hljs-comment">#xpath获取排名等信息</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> results:<br>            save_results(j)<span class="hljs-comment">#存储数据到数据库</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;结束抓取数据...&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1、解析网址信息"><a href="#1、解析网址信息" class="headerlink" title="1、解析网址信息"></a>1、解析网址信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-comment">#模拟浏览器登录</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) &#x27;</span><br>    <span class="hljs-string">&#x27;AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 &#x27;</span><br>    <span class="hljs-string">&#x27;Safari/537.36&#x27;</span>&#125;<br><br><span class="hljs-comment">#解析网址信息</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index_page</span>(<span class="hljs-params">number</span>):</span><br>    url = <span class="hljs-string">&#x27;https://maoyan.com/board/4?offset=%s&#x27;</span> % number<br>    response = requests.get(url=url, headers=headers)<br>    <span class="hljs-keyword">return</span> response.text<br><br><span class="hljs-comment">#主函数</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始抓取数据...&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>):<span class="hljs-comment">#每页偏离10</span><br>        index = index_page(i)<span class="hljs-comment">#解析网址信息</span><br>        results = parse_pages(index)<span class="hljs-comment">#xpath获取排名等信息</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> results:<br>            save_results(j)<span class="hljs-comment">#存储数据到数据库</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;结束抓取数据...&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="2、xpath获取排名等信息"><a href="#2、xpath获取排名等信息" class="headerlink" title="2、xpath获取排名等信息"></a>2、xpath获取排名等信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-comment">#模拟浏览器登录</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) &#x27;</span><br>    <span class="hljs-string">&#x27;AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 &#x27;</span><br>    <span class="hljs-string">&#x27;Safari/537.36&#x27;</span>&#125;<br><br><span class="hljs-comment">#解析网址信息</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index_page</span>(<span class="hljs-params">number</span>):</span><br>    url = <span class="hljs-string">&#x27;https://maoyan.com/board/4?offset=%s&#x27;</span> % number<br>    response = requests.get(url=url, headers=headers)<br>    <span class="hljs-keyword">return</span> response.text<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_pages</span>(<span class="hljs-params">context</span>):</span><br>    tree = etree.HTML(context)<br>    <span class="hljs-comment"># 电影排名</span><br>    ranking = tree.xpath(<span class="hljs-string">&quot;//dd/i/text()&quot;</span>)<br>    <span class="hljs-comment"># 电影名字</span><br>    name = tree.xpath(<span class="hljs-string">&#x27;//p[@class=&quot;name&quot;]/a/text()&#x27;</span>)<br>    <span class="hljs-comment"># 主演</span><br>    performer = tree.xpath(<span class="hljs-string">&#x27;//p[@class=&quot;star&quot;]/text()&#x27;</span>)<br>    performer = [p.strip() <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> performer]<br>    <span class="hljs-comment"># 电影上映时间</span><br>    releasetime = tree.xpath(<span class="hljs-string">&#x27;//p[@class=&quot;releasetime&quot;]/text()&#x27;</span>)<br>    <span class="hljs-comment"># 评分</span><br>    score1 = tree.xpath(<span class="hljs-string">&#x27;//p[@class=&quot;score&quot;]/i[@class=&quot;integer&quot;]/text()&#x27;</span>)<br>    score2 = tree.xpath(<span class="hljs-string">&#x27;//p[@class=&quot;score&quot;]/i[@class=&quot;fraction&quot;]/text()&#x27;</span>)<br>    score = [[score1[i] + score2[i]]<br>             <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(score1), <span class="hljs-built_in">len</span>(score2)))]<br>    <span class="hljs-comment"># 封面图的链接</span><br>    movie_img = tree.xpath(<span class="hljs-string">&#x27;//img[@class=&quot;board-img&quot;]/@data-src&#x27;</span>)<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">zip</span>(ranking, name, performer, releasetime, score, movie_img)<br><br><span class="hljs-comment">#主函数</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始抓取数据...&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>):<span class="hljs-comment">#每页偏离10</span><br>        index = index_page(i)<span class="hljs-comment">#解析网址信息</span><br>        results = parse_pages(index)<span class="hljs-comment">#xpath获取排名等信息</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> results:<br>            save_results(j)<span class="hljs-comment">#存储数据到数据库</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;结束抓取数据...&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3、存储数据到数据库"><a href="#3、存储数据到数据库" class="headerlink" title="3、存储数据到数据库"></a>3、存储数据到数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br><span class="hljs-comment"># 模拟浏览器登录</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) &#x27;</span><br>                  <span class="hljs-string">&#x27;AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 &#x27;</span><br>                  <span class="hljs-string">&#x27;Safari/537.36&#x27;</span>&#125;<br><br><br><span class="hljs-comment"># 解析网址信息</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index_page</span>(<span class="hljs-params">number</span>):</span><br>    url = <span class="hljs-string">&#x27;https://maoyan.com/board/4?offset=%s&#x27;</span> % number<br>    response = requests.get(url=url, headers=headers)<br>    <span class="hljs-keyword">return</span> response.text<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_pages</span>(<span class="hljs-params">context</span>):</span><br>    tree = etree.HTML(context)<br>    <span class="hljs-comment"># 电影排名</span><br>    ranking = tree.xpath(<span class="hljs-string">&quot;//dd/i/text()&quot;</span>)<br>    <span class="hljs-comment"># 电影名字</span><br>    name = tree.xpath(<span class="hljs-string">&#x27;//p[@class=&quot;name&quot;]/a/text()&#x27;</span>)<br>    <span class="hljs-comment"># 主演</span><br>    performer = tree.xpath(<span class="hljs-string">&#x27;//p[@class=&quot;star&quot;]/text()&#x27;</span>)<br>    performer = [p.strip() <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> performer]<br>    <span class="hljs-comment"># 电影上映时间</span><br>    releasetime = tree.xpath(<span class="hljs-string">&#x27;//p[@class=&quot;releasetime&quot;]/text()&#x27;</span>)<br>    <span class="hljs-comment"># 评分</span><br>    score1 = tree.xpath(<span class="hljs-string">&#x27;//p[@class=&quot;score&quot;]/i[@class=&quot;integer&quot;]/text()&#x27;</span>)<br>    score2 = tree.xpath(<span class="hljs-string">&#x27;//p[@class=&quot;score&quot;]/i[@class=&quot;fraction&quot;]/text()&#x27;</span>)<br>    score = [[score1[i] + score2[i]]<br>             <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(score1), <span class="hljs-built_in">len</span>(score2)))]<br>    <span class="hljs-comment"># 封面图的链接</span><br>    movie_img = tree.xpath(<span class="hljs-string">&#x27;//img[@class=&quot;board-img&quot;]/@data-src&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">zip</span>(ranking, name, performer, releasetime, score, movie_img)<br><br><br><span class="hljs-comment"># 存储数据到数据库</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_results</span>(<span class="hljs-params">result</span>):</span><br>    <span class="hljs-comment"># 1. 创建数据库连接对象</span><br>    con = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3306</span>,<br>                          database=<span class="hljs-string">&#x27;maoyan&#x27;</span>, charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>,<br>                          user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;root&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(result[<span class="hljs-number">5</span>], headers=headers).content<br>        <span class="hljs-comment"># 2. 通过连接对象获取游标</span><br>        <span class="hljs-keyword">with</span> con.cursor() <span class="hljs-keyword">as</span> cursor:<br>            <span class="hljs-comment"># 3. 通过游标执行SQL并获得执行结果</span><br>            <span class="hljs-comment"># print(list(map(float, result[4]))[0])</span><br>            sql = <span class="hljs-string">&quot;insert into tb_my values (&#x27;&#123;0&#125;&#x27;, &#x27;&#123;1&#125;&#x27;, &#x27;&#123;2&#125;&#x27;,&#x27;&#123;3&#125;&#x27;, &#x27;&#123;4&#125;&#x27;, &#x27;&#123;5&#125;&#x27;, %s)&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<br>                result[<span class="hljs-number">0</span>]), result[<span class="hljs-number">1</span>], result[<span class="hljs-number">2</span>], result[<span class="hljs-number">3</span>], <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">float</span>, result[<span class="hljs-number">4</span>]))[<span class="hljs-number">0</span>], result[<span class="hljs-number">5</span>])<br>            result = cursor.execute(sql, response)<br>            <span class="hljs-keyword">if</span> result == <span class="hljs-number">1</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;写入成功!&#x27;</span>)<br>            <span class="hljs-comment"># 4. 操作成功提交事务</span><br>            con.commit()<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-comment"># 5. 关闭连接释放资源</span><br>        con.close()<br><br><br><span class="hljs-comment"># 主函数</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始抓取数据...&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>):  <span class="hljs-comment"># 每页偏离10</span><br>        index = index_page(i)  <span class="hljs-comment"># 解析网址信息</span><br>        results = parse_pages(index)  <span class="hljs-comment"># xpath获取排名等信息</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> results:<br>            save_results(j)  <span class="hljs-comment"># 存储数据到数据库</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;结束抓取数据...&#x27;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-github博客部署</title>
    <link href="/archives/93b36605.html"/>
    <url>/archives/93b36605.html</url>
    
    <content type="html"><![CDATA[<p><strong>环境搭建</strong></p><h1 id="1、安装git"><a href="#1、安装git" class="headerlink" title="1、安装git"></a>1、安装git</h1><p>1)下载地址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a><br>2).安装：双击安装，一直点击下一步即可</p><p><strong>注：</strong></p><p>报错：’git’ 不是内部或外部命令，也不是可运行的程序 或批处理文件。</p><p>解决方法：</p><p>我的电脑右键-属性-高级系统设置-环境变量-在系统变量中找到path-新建-输入自己git.exe的路径；</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">D:<span class="hljs-symbol">\g</span>it<span class="hljs-symbol">\G</span>it<span class="hljs-symbol">\b</span>in <br></code></pre></td></tr></table></figure><h1 id="2、安装node-js"><a href="#2、安装node-js" class="headerlink" title="2、安装node.js"></a>2、安装node.js</h1><p>1)下载地址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a><br>2).安装：双击安装，一直点击下一步即可</p><h1 id="3、安装hexo"><a href="#3、安装hexo" class="headerlink" title="3、安装hexo"></a>3、安装hexo</h1><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><h2 id="3-1-初始化blog"><a href="#3-1-初始化blog" class="headerlink" title="3.1 初始化blog"></a>3.1 初始化blog</h2><p>比较推荐大家按照cmder软件；</p><p>首先新建博客文件夹blog，切换目录至博客；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog<br></code></pre></td></tr></table></figure><p>创建并初始化博客文件夹blog</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> blog<br></code></pre></td></tr></table></figure><h2 id="3-2-测试运行"><a href="#3-2-测试运行" class="headerlink" title="3.2 测试运行"></a>3.2 测试运行</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span> <br></code></pre></td></tr></table></figure><h2 id="3-3-启动blog：本地预览"><a href="#3-3-启动blog：本地预览" class="headerlink" title="3.3 启动blog：本地预览"></a>3.3 启动blog：本地预览</h2><p>文件夹中出现一个public的文件夹，public的文件夹是hexo生成的一个完整的静态网站；</p><p>运行以下命令预览本地博客：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>本地blog创建完成，默认通过127.0.0.1:4000访问。<br>如果你不喜欢默认主题，可根据下面介绍换上其他漂亮的皮肤</p><h2 id="3-4-替换主题"><a href="#3-4-替换主题" class="headerlink" title="3.4 替换主题"></a>3.4 替换主题</h2><p>可以在<a href="https://hexo.io/themes/">hexo官网</a>查看自己喜欢的主题<br>通过git clone [url] themes/xxx 将主题克隆到本地，<br>修改 <code>/blog/_config.yml</code> 中的theme</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid<br></code></pre></td></tr></table></figure><p>然后再</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">hexo clean <span class="hljs-meta">&amp;&amp; hexo g &amp;&amp; hexo s  <span class="hljs-comment">// g就是generate缩写  d就是deploy 远程部署</span></span><br></code></pre></td></tr></table></figure><p>本地重载，就可以再localhost:4000查看部署情况</p><h1 id="4、写文章"><a href="#4、写文章" class="headerlink" title="4、写文章"></a>4、写文章</h1><p>文章在 <code>blog/source/_posts/</code> 下，以markdown格式写成，推荐使用<code>typerora</code>作为编写工具。</p><p>推荐使用 <code>hexo new 文章名</code> 来创建一篇文章<br>执行命令 仍是在 <code>blog</code> 目录下，打开 <code>cmder</code> 命令框。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 创建一个标题为“xxx”的文章</span><br>hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;git教程&quot;</span><br></code></pre></td></tr></table></figure><p>然后使用typeora编写即可</p><h1 id="5、搭建github-pages"><a href="#5、搭建github-pages" class="headerlink" title="5、搭建github pages"></a>5、搭建github pages</h1><p>想让博客出现在互联网上，有两种选择：</p><p>A:搭建服务器</p><p>B:使用网站托管等静态网站展现方式</p><h2 id="5-1-注册github账户"><a href="#5-1-注册github账户" class="headerlink" title="5.1 注册github账户"></a>5.1 注册github账户</h2><p>到<a href="https://github.com/">github官网</a>注册一个github账户</p><h2 id="5-2-配置登录免密码"><a href="#5-2-配置登录免密码" class="headerlink" title="5.2 配置登录免密码"></a>5.2 配置登录免密码</h2><h2 id="5-3-创建github远程仓库"><a href="#5-3-创建github远程仓库" class="headerlink" title="5.3 创建github远程仓库"></a>5.3 创建github远程仓库</h2><p>在github上创建一个仓库 <code>用户名.github.io</code></p><h2 id="5-4-配置Hexo"><a href="#5-4-配置Hexo" class="headerlink" title="5.4 配置Hexo"></a>5.4 配置Hexo</h2><p>修改 <code>_config.yml</code>,配置远程部署</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">   type:</span> git<br><span class="hljs-symbol">   repo:</span> git@github.com:xxx/xxx.github.io.git<br><span class="hljs-symbol">   branch:</span> master<br></code></pre></td></tr></table></figure><h2 id="5-5-安装git部署插件"><a href="#5-5-安装git部署插件" class="headerlink" title="5.5 安装git部署插件"></a>5.5 安装git部署插件</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><h2 id="5-6-远程部署"><a href="#5-6-远程部署" class="headerlink" title="5.6  远程部署"></a>5.6  远程部署</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo deploy</span><br></code></pre></td></tr></table></figure><h2 id="5-7-测试"><a href="#5-7-测试" class="headerlink" title="5.7 测试"></a>5.7 测试</h2><p>打开 <code>xxx.github.io</code> ，就能看到你的blog了</p><blockquote><p><strong>存在问题：GitHub Pages 只能被谷歌收录，无法被百度收录</strong></p></blockquote><h1 id="6、搭建图床"><a href="#6、搭建图床" class="headerlink" title="6、搭建图床"></a>6、搭建图床</h1><p>GitHub 图床是个不错的选择，利用 jsDelivr CDN 加速访问（一个免费开源的 CDN 解决方案），PicGo 工具一键上传，操作简单高效，目前免费图床的最佳解决方案！</p><ol><li><p>登录/注册GitHub，新建一个仓库，填写好仓库名，仓库描述，仓库初始化</p></li><li><p>在主页选择Settings-Developer settings-Personal access tokens-Generate new token, 填写好描述，勾选repo，然后点击Generate token生成一个Token，</p><blockquote><p>注意这个Token只会显示一次，自己先保存下来 </p></blockquote></li><li><p>下载<a href="https://github.com/Molunerfinn/picgo/releases">Releases · Molunerfinn/PicGo (github.com)</a></p></li><li><p>配置PicGo</p><p><img src="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/tc_config.jpg"></p><blockquote><p>设定仓库名：按照【用户名/图床仓库名】的格式填写</p><p>设定分支名：【master】</p><p>设定Token：粘贴之前生成的【Token】</p><p>指定存储路径：填写想要储存的路径，如【ITRHX-PIC/】，这样就会在仓库下创建一个名为 ITRHX-PIC 的文件夹，图片将会储存在此文件夹中</p><p>设定自定义域名：它的作用是，在图片上传后，PicGo 会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接，并放到粘贴板上;在编写文档时，只需要粘贴链接（<a href="https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/tc_config.jpg)%E5%8D%B3%E5%8F%AF%E5%9C%A8%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%98%BE%E7%A4%BA">https://cdn.jsdelivr.net/gh/Ah-yuan/blogimg/blog_img/tc_config.jpg)即可在静态网站显示</a></p></blockquote></li></ol><h1 id="7、搭建gitee-pages"><a href="#7、搭建gitee-pages" class="headerlink" title="7、搭建gitee pages"></a>7、搭建gitee pages</h1><p>在gitee主页注册账号：<a href="https://gitee.com/signup">注册 - Gitee.com</a></p><p>1）把 GitHub Pages 仓库复制到码云。</p><p>登录码云，点击右上角的 + 号，选择「新建仓库」，点击「导入仓库」，选择从github导入，跳出 GitHub 认证；</p><p>2）启用码云 Pages。<br>在菜单栏找到服务，选择「Gitee Pages」，点击「启动」</p><p>可以直接点击码云 Page 生成的网站地址进行访问，可以确认 GitHub Pages 已经成功同步到码云 Pages 了。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python实战-廖雪峰-代码解析（四）</title>
    <link href="/archives/a5e6400a.html"/>
    <url>/archives/a5e6400a.html</url>
    
    <content type="html"><![CDATA[<h1 id="10、编写日志创建页"><a href="#10、编写日志创建页" class="headerlink" title="10、编写日志创建页"></a>10、编写日志创建页</h1><p>编写一个REST API，用于创建一个Blog</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#handlers.py新增</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_admin</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-keyword">if</span> request.__user__ <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> request.__user__.admin:<br>        <span class="hljs-keyword">raise</span> APIPermissionError()<br><span class="hljs-comment">#MVC使得界面可达</span><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/manage/blogs/create&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">manage_create_blog</span>():</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;__template__&#x27;</span>: <span class="hljs-string">&#x27;manage_blog_edit.html&#x27;</span>,<br>        <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;action&#x27;</span>: <span class="hljs-string">&#x27;/api/blogs&#x27;</span>  <span class="hljs-comment"># 对应HTML页面中VUE的action名字</span><br>    &#125;<br><br><span class="hljs-meta">@post(<span class="hljs-params"><span class="hljs-string">&#x27;/api/blogs&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_create_blog</span>(<span class="hljs-params">request, *, name, summary, content</span>):</span><br>    check_admin(request)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> name.strip():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;name cannot be empty.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> summary <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> summary.strip():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;summary&#x27;</span>, <span class="hljs-string">&#x27;summary cannot be empty.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> content.strip():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;content&#x27;</span>, <span class="hljs-string">&#x27;content cannot be empty.&#x27;</span>)<br>    blog = Blog(user_id=request.__user__.<span class="hljs-built_in">id</span>, user_name=request.__user__.name, user_image=request.__user__.image,<br>                name=name.strip(), summary=summary.strip(), content=content.strip())<br>    <span class="hljs-keyword">await</span> blog.save()<br>    <span class="hljs-comment"># 返回一个dict,没有模板，会把信息直接显示出来</span><br>    <span class="hljs-keyword">return</span> blog<br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/api/blogs&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_blogs</span>(<span class="hljs-params">*, page=<span class="hljs-string">&#x27;1&#x27;</span></span>):</span><br>    page_index = get_page_index(page)<br>    blogs_count = <span class="hljs-keyword">await</span> Blog.findNumber(<span class="hljs-string">&#x27;count(id)&#x27;</span>)<br>    p = Page(blogs_count, page_index)<br>    <span class="hljs-keyword">if</span> blogs_count == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(page=p, blogs=())<br>    blogs = <span class="hljs-keyword">await</span> Blog.findAll(orderBy=<span class="hljs-string">&#x27;created_at desc&#x27;</span>, limit=(p.offset, p.limit))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(page=p, blogs=blogs)<br></code></pre></td></tr></table></figure><p>manage_blog_edit.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;__base__.html&#x27; %&#125;<br><br>&#123;% block title %&#125;编辑日志&#123;% endblock %&#125;<br><br>&#123;% block beforehead %&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span></span><br><span class="javascript">    ID = <span class="hljs-string">&#x27;&#123;&#123; id &#125;&#125;&#x27;</span>,</span><br><span class="javascript">    action = <span class="hljs-string">&#x27;&#123;&#123; action &#125;&#125;&#x27;</span>;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initVM</span>(<span class="hljs-params">blog</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-comment">// 前面不加var表示这还是一个全局变量，否则是一个局部变量</span></span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#vm&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: blog,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">submit</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">                event.preventDefault();</span><br><span class="javascript">                <span class="hljs-keyword">var</span> $form = $(<span class="hljs-string">&#x27;#vm&#x27;</span>).find(<span class="hljs-string">&#x27;form&#x27;</span>);</span><br><span class="javascript">                $form.postJSON(action, <span class="hljs-built_in">this</span>.$data, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, r</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="javascript">                        $form.showFormError(err);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        alert(<span class="hljs-string">&#x27;创建成功!&#x27;</span>)</span><br><span class="javascript">                        <span class="hljs-keyword">return</span> location.assign(<span class="hljs-string">&#x27;/manage/blogs&#x27;</span>);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">    $(<span class="hljs-string">&#x27;#vm&#x27;</span>).show();</span><br><span class="javascript">&#125;</span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">if</span> (ID) &#123;</span><br><span class="javascript">        getJSON(<span class="hljs-string">&#x27;/api/blogs/&#x27;</span> + ID, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, blog</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> fatal(err);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            $(<span class="hljs-string">&#x27;#loading&#x27;</span>).hide();</span><br><span class="javascript">            initVM(blog);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">        $(<span class="hljs-string">&#x27;#loading&#x27;</span>).hide();</span><br><span class="javascript">        initVM(&#123;</span><br><span class="javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">summary</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1 uk-margin-bottom&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-panel uk-panel-box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-breadcrumb&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/comments&quot;</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/blogs&quot;</span>&gt;</span>日志<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/users&quot;</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loading&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1 uk-text-center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-spinner uk-icon-medium uk-icon-spin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 正在加载...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-2-3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;submit: submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form uk-form-stacked&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-alert uk-alert-danger uk-hidden&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-label&quot;</span>&gt;</span>标题:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-controls&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;标题&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-label&quot;</span>&gt;</span>摘要:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-controls&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;summary&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;summary&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;摘要&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;resize:none;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-label&quot;</span>&gt;</span>内容:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-controls&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;16&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;内容&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;resize:none;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-button uk-button-primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-save&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/blogs&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-button&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-times&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 取消<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><p>需手动在数据库中将用户设置为管理员</p><blockquote><p>修改admin字段为1</p></blockquote><h1 id="11、编写日志列表页"><a href="#11、编写日志列表页" class="headerlink" title="11、编写日志列表页"></a>11、编写日志列表页</h1><p>在<code>handlers.py</code>中新增实现API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#管理页面</span><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/manage/blogs&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">manage_blogs</span>(<span class="hljs-params">*, page=<span class="hljs-string">&#x27;1&#x27;</span></span>):</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;__template__&#x27;</span>: <span class="hljs-string">&#x27;manage_blogs.html&#x27;</span>,<br>        <span class="hljs-string">&#x27;page_index&#x27;</span>: get_page_index(page)<br>    &#125;<br><br><span class="hljs-meta">@post(<span class="hljs-params"><span class="hljs-string">&#x27;/api/blogs/delete/&#123;id&#125;&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_delete_blog</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, request</span>):</span><br>    logging.info(<span class="hljs-string">&#x27;删除博客的ID为：%s&#x27;</span> % <span class="hljs-built_in">id</span>)<br>    check_admin(request)<br>    b = <span class="hljs-keyword">await</span> Blog.find(<span class="hljs-built_in">id</span>)<br>    <span class="hljs-keyword">if</span> b <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> APIResourceNotFoundError(<span class="hljs-string">&#x27;Blog&#x27;</span>)<br>    <span class="hljs-keyword">await</span> b.remove()<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br><br><span class="hljs-meta">@post(<span class="hljs-params"><span class="hljs-string">&#x27;/api/blogs/modify&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_modify_blog</span>(<span class="hljs-params">request, *, <span class="hljs-built_in">id</span>, name, summary, content</span>):</span><br>    logging.info(<span class="hljs-string">&#x27;修改的博客的ID为：%s&#x27;</span> % <span class="hljs-built_in">id</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> name.strip():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;name cannot be empty.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> summary <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> summary.strip():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;summary&#x27;</span>, <span class="hljs-string">&#x27;summary cannot be empty.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> content.strip():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;content&#x27;</span>, <span class="hljs-string">&#x27;content cannot be empty.&#x27;</span>)<br><br>    blog = <span class="hljs-keyword">await</span> Blog.find(<span class="hljs-built_in">id</span>)<br>    blog.name = name<br>    blog.summary = summary<br>    blog.content = content<br><br>    <span class="hljs-keyword">await</span> blog.update()<br>    <span class="hljs-keyword">return</span> blog<br><br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/manage/blogs/modify/&#123;id&#125;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">manage_modify_blog</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;__template__&#x27;</span>: <span class="hljs-string">&#x27;manage_blog_modify.html&#x27;</span>,<br>        <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-built_in">id</span>,<br>        <span class="hljs-string">&#x27;action&#x27;</span>: <span class="hljs-string">&#x27;/api/blogs/modify&#x27;</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>模板页面首先通过API：<code>GET /api/blogs?page=?</code>拿到Model,然后，通过Vue初始化MVVM：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;__base__.html&#x27; %&#125;<br><br>&#123;% block title %&#125;日志&#123;% endblock %&#125;<br><br>&#123;% block beforehead %&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initVM</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(data)</span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#vm&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">blogs</span>: data.blogs,</span><br><span class="javascript">            <span class="hljs-attr">page</span>: data.page</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">edit_blog</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">blog</span>) </span>&#123;</span><br><span class="javascript">                location.assign(<span class="hljs-string">&#x27;/manage/blogs/modify/&#x27;</span> + blog.id);</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">delete_blog</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">blog</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (confirm(<span class="hljs-string">&#x27;确认要删除“&#x27;</span> + blog.name + <span class="hljs-string">&#x27;”？删除后不可恢复！&#x27;</span>)) &#123;</span><br><span class="javascript">                    postJSON(<span class="hljs-string">&#x27;/api/blogs/delete/&#x27;</span> + blog.id , <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, r</span>) </span>&#123;</span><br><span class="javascript">                        <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="javascript">                            <span class="hljs-keyword">return</span> alert(err.message || err.error || err);</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                        refresh();</span><br><span class="javascript">                    &#125;);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">    $(<span class="hljs-string">&#x27;#vm&#x27;</span>).show();</span><br><span class="javascript">&#125;</span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    getJSON(<span class="hljs-string">&#x27;/api/blogs&#x27;</span>, &#123;</span><br><span class="javascript">        <span class="hljs-attr">page</span>: &#123;&#123; page_index &#125;&#125;</span><br><span class="javascript">    &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, results</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> fatal(err);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        $(<span class="hljs-string">&#x27;#loading&#x27;</span>).hide();</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;page_index is &#x27;</span>);</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(&#123;&#123;page_index&#125;&#125;);</span><br><span class="javascript">        initVM(results);</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1 uk-margin-bottom&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-panel uk-panel-box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-breadcrumb&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/comments&quot;</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>日志<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/users&quot;</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loading&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1 uk-text-center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-spinner uk-icon-medium uk-icon-spin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 正在加载...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/blogs/create&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-button uk-button-primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-plus&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 新日志<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-table uk-table-hover&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-5-10&quot;</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-2-10&quot;</span>&gt;</span>作者<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-2-10&quot;</span>&gt;</span>创建时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-10&quot;</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-repeat</span>=<span class="hljs-string">&quot;blog: blogs&quot;</span> &gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">v-attr</span>=<span class="hljs-string">&quot;href: &#x27;/blog/&#x27;+blog.id&quot;</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;blog.name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">v-attr</span>=<span class="hljs-string">&quot;href: &#x27;/user/&#x27;+blog.user_id&quot;</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;blog.user_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;blog.created_at.toDateTime()&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#0&quot;</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;click: edit_blog(blog)&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-edit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#0&quot;</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;click: delete_blog(blog)&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-trash-o&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-component</span>=<span class="hljs-string">&quot;pagination&quot;</span> <span class="hljs-attr">v-with</span>=<span class="hljs-string">&quot;page&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h1 id="12、补充功能"><a href="#12、补充功能" class="headerlink" title="12、补充功能"></a>12、补充功能</h1><h2 id="12-1修改首页显示"><a href="#12-1修改首页显示" class="headerlink" title="12.1修改首页显示"></a>12.1修改首页显示</h2><p>修改handlers.py中首页显示实际blog条目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">*, page=<span class="hljs-string">&#x27;1&#x27;</span></span>):</span><br>    <span class="hljs-comment"># summary = &quot;Lorem ipsum dolor sit amet, consectetur adipisicing elit,&quot; \</span><br>    <span class="hljs-comment">#           &quot; sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&quot;</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># blogs = [</span><br>    <span class="hljs-comment">#     Blog(id=&#x27;1&#x27;, name=&#x27;Test Blog&#x27;, summary=summary, created_at=time.time() - 120),</span><br>    <span class="hljs-comment">#     Blog(id=&#x27;2&#x27;, name=&#x27;Something New&#x27;, summary=summary, created_at=time.time() - 3600),</span><br>    <span class="hljs-comment">#     Blog(id=&#x27;3&#x27;, name=&#x27;Learn Swift&#x27;, summary=summary, created_at=time.time() - 7200)</span><br>    <span class="hljs-comment"># ]</span><br>    page_index = get_page_index(page)<br>    <span class="hljs-comment"># 查找博客表里的条目数</span><br>    num = <span class="hljs-keyword">await</span> Blog.findNumber(<span class="hljs-string">&#x27;count(id)&#x27;</span>)<br>    <span class="hljs-comment"># 没有条目则不显示</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> num <span class="hljs-keyword">or</span> num == <span class="hljs-number">0</span>:<br>        logging.info(<span class="hljs-string">&#x27;the type of num is :%s&#x27;</span> % <span class="hljs-built_in">type</span>(num))<br>        blogs = []<br>    <span class="hljs-keyword">else</span>:<br>        page = Page(num, page_index)<br>        <span class="hljs-comment"># 根据计算出来的offset(取的初始条目index)和limit(取的条数)，来取出条目</span><br>        <span class="hljs-comment"># 首页只显示前5篇文章</span><br>        blogs = <span class="hljs-keyword">await</span> Blog.findAll(orderBy=<span class="hljs-string">&#x27;created_at desc&#x27;</span>, limit=(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>))<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;__template__&#x27;</span>: <span class="hljs-string">&#x27;blogs.html&#x27;</span>,<br>        <span class="hljs-string">&#x27;page&#x27;</span>: page,<br>        <span class="hljs-string">&#x27;blogs&#x27;</span>: blogs<br>        <span class="hljs-comment"># &#x27;__template__&#x27;指定的模板文件是blogs.html，其他参数是传递给模板的数据</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="12-2增添用户登出"><a href="#12-2增添用户登出" class="headerlink" title="12.2增添用户登出"></a>12.2增添用户登出</h2><p>handlers.py中，增加登出api</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">@<span class="hljs-builtin-name">get</span>(<span class="hljs-string">&#x27;/signout&#x27;</span>)<br>def signout(request):<br>    referer = request.headers.<span class="hljs-builtin-name">get</span>(<span class="hljs-string">&#x27;Referer&#x27;</span>)<br>    r = web.HTTPFound(referer <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;/&#x27;</span>)<br>    # 清理掉cookie来退出账户<br>    r.set_cookie(COOKIE_NAME, <span class="hljs-string">&#x27;-deleted-&#x27;</span>, <span class="hljs-attribute">max_age</span>=0, <span class="hljs-attribute">httponly</span>=<span class="hljs-literal">True</span>)<br>    logging.<span class="hljs-builtin-name">info</span>(<span class="hljs-string">&#x27;user signed out.&#x27;</span>)<br>    return r<br></code></pre></td></tr></table></figure><h2 id="12-3增添用户管理"><a href="#12-3增添用户管理" class="headerlink" title="12.3增添用户管理"></a>12.3增添用户管理</h2><p>handlers.py中，增加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/manage/users&#x27;</span></span>)</span><span class="hljs-comment">#管理用户</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">manage_users</span>(<span class="hljs-params">*, page=<span class="hljs-string">&#x27;1&#x27;</span></span>):</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;__template__&#x27;</span>: <span class="hljs-string">&#x27;manage_users.html&#x27;</span>,<br>        <span class="hljs-string">&#x27;page_index&#x27;</span>: get_page_index(page)<br>    &#125;<br></code></pre></td></tr></table></figure><p>manage_users.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;__base__.html&#x27; %&#125;<br><br>&#123;% block title %&#125;用户&#123;% endblock %&#125;<br><br>&#123;% block beforehead %&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initVM</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(data)</span><br><span class="javascript">    $(<span class="hljs-string">&#x27;#vm&#x27;</span>).show();</span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#vm&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">users</span>: data.users,</span><br><span class="javascript">            <span class="hljs-attr">page</span>: data.page</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">&#125;</span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    getJSON(<span class="hljs-string">&#x27;/api/users&#x27;</span>, &#123;</span><br><span class="javascript">        <span class="hljs-attr">page</span>: &#123;&#123; page_index &#125;&#125;</span><br><span class="javascript">    &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, results</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> fatal(err);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        $(<span class="hljs-string">&#x27;#loading&#x27;</span>).hide();</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;page_index is &#x27;</span>);</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(&#123;&#123;page_index&#125;&#125;);</span><br><span class="javascript">        initVM(results);</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1 uk-margin-bottom&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-panel uk-panel-box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-breadcrumb&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/comments&quot;</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/blogs&quot;</span>&gt;</span>日志<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loading&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1 uk-text-center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-spinner uk-icon-medium uk-icon-spin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 正在加载...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-table uk-table-hover&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-4-10&quot;</span>&gt;</span>名字<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-4-10&quot;</span>&gt;</span>电子邮件<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-2-10&quot;</span>&gt;</span>注册时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-repeat</span>=<span class="hljs-string">&quot;user: users&quot;</span> &gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;user.name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.admin&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#d05&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-key&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 管理员<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-attr</span>=<span class="hljs-string">&quot;href: &#x27;mailto:&#x27;+user.email&quot;</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;user.email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;user.created_at.toDateTime()&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-component</span>=<span class="hljs-string">&quot;pagination&quot;</span> <span class="hljs-attr">v-with</span>=<span class="hljs-string">&quot;page&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h2 id="12-4增添博客管理"><a href="#12-4增添博客管理" class="headerlink" title="12.4增添博客管理"></a>12.4增添博客管理</h2><p>添加markdown.py，将博客内容转化为markdown格式；</p><p>handlers.py中，增加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">text2html</span>(<span class="hljs-params">text</span>):</span><br>    <span class="hljs-comment"># HTML转义字符</span><br>    <span class="hljs-comment"># &quot;&amp;quot;</span><br>    <span class="hljs-comment"># &amp; &amp;amp;</span><br>    <span class="hljs-comment"># &lt; &amp;lt;</span><br>    <span class="hljs-comment"># &gt; &amp;gt;</span><br>    <span class="hljs-comment"># 不断开空格&amp;nbsp;</span><br><br>    lines = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> s: <span class="hljs-string">&#x27;&lt;p&gt;%s&lt;/p&gt;&#x27;</span> % s.replace(<span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-string">&#x27;%amp;&#x27;</span>).replace(<span class="hljs-string">&#x27;&lt;&#x27;</span>, <span class="hljs-string">&#x27;&amp;alt;&#x27;</span>).replace(<span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-string">&#x27;&amp;gt;&#x27;</span>),<br>                <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> s: s.strip() != <span class="hljs-string">&#x27;&#x27;</span>, text.split(<span class="hljs-string">&#x27;\n&#x27;</span>)))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(lines)<br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/blog/&#123;id&#125;&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_blog</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):</span><br>    blog = <span class="hljs-keyword">await</span> Blog.find(<span class="hljs-built_in">id</span>)<br>    comments = <span class="hljs-keyword">await</span> Comment.findAll(<span class="hljs-string">&#x27;blog_id=?&#x27;</span>, [<span class="hljs-built_in">id</span>], orderBy=<span class="hljs-string">&#x27;created_at desc&#x27;</span>)<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> comments:<br>        c.html_content = text2html(c.content)<br>    blog.html_content = markdown2.markdown(blog.content)<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;__template__&#x27;</span>: <span class="hljs-string">&#x27;blog.html&#x27;</span>,<br>        <span class="hljs-string">&quot;blog&quot;</span>: blog,<br>        <span class="hljs-string">&#x27;comments&#x27;</span>: comments<br>    &#125;<br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/api/blogs/&#123;id&#125;&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_get_blog</span>(<span class="hljs-params">*, <span class="hljs-built_in">id</span></span>):</span><br>    blog = <span class="hljs-keyword">await</span> Blog.find(<span class="hljs-built_in">id</span>)<br>    <span class="hljs-keyword">return</span> blog<br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/manage/blogs/create&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">manage_create_blog</span>():</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;__template__&#x27;</span>: <span class="hljs-string">&#x27;manage_blog_edit.html&#x27;</span>,<br>        <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;action&#x27;</span>: <span class="hljs-string">&#x27;/api/blogs&#x27;</span>  <span class="hljs-comment"># 对应HTML页面中VUE的action名字</span><br>    &#125;<br><br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/manage/blogs&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">manage_blogs</span>(<span class="hljs-params">*, page=<span class="hljs-string">&#x27;1&#x27;</span></span>):</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;__template__&#x27;</span>: <span class="hljs-string">&#x27;manage_blogs.html&#x27;</span>,<br>        <span class="hljs-string">&#x27;page_index&#x27;</span>: get_page_index(page)<br>    &#125;<br><br><br><span class="hljs-meta">@post(<span class="hljs-params"><span class="hljs-string">&#x27;/api/blogs&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_create_blog</span>(<span class="hljs-params">request, *, name, summary, content</span>):</span><br>    check_admin(request)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> name.strip():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;name cannot be empty.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> summary <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> summary.strip():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;summary&#x27;</span>, <span class="hljs-string">&#x27;summary cannot be empty.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> content.strip():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;content&#x27;</span>, <span class="hljs-string">&#x27;content cannot be empty.&#x27;</span>)<br>    blog = Blog(user_id=request.__user__.<span class="hljs-built_in">id</span>, user_name=request.__user__.name, user_image=request.__user__.image,<br>                name=name.strip(), summary=summary.strip(), content=content.strip())<br>    <span class="hljs-keyword">await</span> blog.save()<br>    <span class="hljs-comment"># 返回一个dict,没有模板，会把信息直接显示出来</span><br>    <span class="hljs-keyword">return</span> blog<br><br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/api/blogs&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_blogs</span>(<span class="hljs-params">*, page=<span class="hljs-string">&#x27;1&#x27;</span></span>):</span><br>    page_index = get_page_index(page)<br>    blogs_count = <span class="hljs-keyword">await</span> Blog.findNumber(<span class="hljs-string">&#x27;count(id)&#x27;</span>)<br>    p = Page(blogs_count, page_index)<br>    <span class="hljs-keyword">if</span> blogs_count == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(page=p, blogs=())<br>    blogs = <span class="hljs-keyword">await</span> Blog.findAll(orderBy=<span class="hljs-string">&#x27;created_at desc&#x27;</span>, limit=(p.offset, p.limit))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(page=p, blogs=blogs)<br><br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/blog/&#123;id&#125;&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_blog</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):</span><br>    blog = <span class="hljs-keyword">await</span> Blog.find(<span class="hljs-built_in">id</span>)<br>    comments = <span class="hljs-keyword">await</span> Comment.findAll(<span class="hljs-string">&#x27;blog_id=?&#x27;</span>, [<span class="hljs-built_in">id</span>], orderBy=<span class="hljs-string">&#x27;created_at desc&#x27;</span>)<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> comments:<br>        c.html_content = text2html(c.content)<br>    blog.html_content = markdown2.markdown(blog.content)<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;__template__&#x27;</span>: <span class="hljs-string">&#x27;blog.html&#x27;</span>,<br>        <span class="hljs-string">&quot;blog&quot;</span>: blog,<br>        <span class="hljs-string">&#x27;comments&#x27;</span>: comments<br>    &#125;<br><br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/api/blogs/&#123;id&#125;&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_get_blog</span>(<span class="hljs-params">*, <span class="hljs-built_in">id</span></span>):</span><br>    blog = <span class="hljs-keyword">await</span> Blog.find(<span class="hljs-built_in">id</span>)<br>    <span class="hljs-keyword">return</span> blog<br><br><br><span class="hljs-meta">@post(<span class="hljs-params"><span class="hljs-string">&#x27;/api/blogs/delete/&#123;id&#125;&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_delete_blog</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, request</span>):</span><br>    logging.info(<span class="hljs-string">&#x27;删除博客的ID为：%s&#x27;</span> % <span class="hljs-built_in">id</span>)<br>    check_admin(request)<br>    b = <span class="hljs-keyword">await</span> Blog.find(<span class="hljs-built_in">id</span>)<br>    <span class="hljs-keyword">if</span> b <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> APIResourceNotFoundError(<span class="hljs-string">&#x27;Blog&#x27;</span>)<br>    <span class="hljs-keyword">await</span> b.remove()<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br><br><br><span class="hljs-meta">@post(<span class="hljs-params"><span class="hljs-string">&#x27;/api/blogs/modify&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_modify_blog</span>(<span class="hljs-params">request, *, <span class="hljs-built_in">id</span>, name, summary, content</span>):</span><br>    logging.info(<span class="hljs-string">&#x27;修改的博客的ID为：%s&#x27;</span> % <span class="hljs-built_in">id</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> name.strip():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;name cannot be empty.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> summary <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> summary.strip():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;summary&#x27;</span>, <span class="hljs-string">&#x27;summary cannot be empty.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> content.strip():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;content&#x27;</span>, <span class="hljs-string">&#x27;content cannot be empty.&#x27;</span>)<br><br>    blog = <span class="hljs-keyword">await</span> Blog.find(<span class="hljs-built_in">id</span>)<br>    blog.name = name<br>    blog.summary = summary<br>    blog.content = content<br><br>    <span class="hljs-keyword">await</span> blog.update()<br>    <span class="hljs-keyword">return</span> blog<br><br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/manage/blogs/modify/&#123;id&#125;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">manage_modify_blog</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;__template__&#x27;</span>: <span class="hljs-string">&#x27;manage_blog_modify.html&#x27;</span>,<br>        <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-built_in">id</span>,<br>        <span class="hljs-string">&#x27;action&#x27;</span>: <span class="hljs-string">&#x27;/api/blogs/modify&#x27;</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><p>blog.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;__base__.html&#x27; %&#125;<br><br>&#123;% block title %&#125;&#123;&#123; blog.name &#125;&#125;&#123;% endblock %&#125;<br><br>&#123;% block beforehead %&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> comment_url = <span class="hljs-string">&#x27;/api/blogs/&#123;&#123; blog.id &#125;&#125;/comments&#x27;</span>;</span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> $form = $(<span class="hljs-string">&#x27;#form-comment&#x27;</span>);</span><br><span class="javascript">    $form.submit(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        e.preventDefault();</span><br><span class="javascript">        $form.showFormError(<span class="hljs-string">&#x27;&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> content = $form.find(<span class="hljs-string">&#x27;textarea&#x27;</span>).val().trim();</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (content===<span class="hljs-string">&#x27;&#x27;</span>) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> $form.showFormError(<span class="hljs-string">&#x27;请输入评论内容！&#x27;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        $form.postJSON(comment_url, &#123; <span class="hljs-attr">content</span>: content &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, result</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> $form.showFormError(err);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            refresh();</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-medium-3-4&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-article&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123; blog.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-article-meta&quot;</span>&gt;</span>发表于&#123;&#123; blog.created_at|datetime &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; blog.html_content|safe &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-article-divider&quot;</span>&gt;</span><br><br>    &#123;% if __user__ %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>发表评论<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-comment&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-comment-header&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-comment-avatar uk-border-circle&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123; __user__.image &#125;&#125;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-comment-title&quot;</span>&gt;</span>&#123;&#123; __user__.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-comment-body&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form-comment&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-alert uk-alert-danger uk-hidden&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;说点什么吧&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%;resize:none;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-button uk-button-primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-comment&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 发表评论<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-article-divider&quot;</span>&gt;</span><br>    &#123;% endif %&#125;<br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>最新评论<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-comment-list&quot;</span>&gt;</span><br>            &#123;% for comment in comments %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-comment&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-comment-header&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-comment-avatar uk-border-circle&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123; comment.user_image &#125;&#125;&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-comment-title&quot;</span>&gt;</span>&#123;&#123; comment.user_name &#125;&#125; &#123;% if comment.user_id==blog.user_id %&#125;(作者)&#123;% endif %&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-comment-meta&quot;</span>&gt;</span>&#123;&#123; comment.created_at|datetime &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-comment-body&quot;</span>&gt;</span><br>                        &#123;&#123; comment.html_content|safe &#125;&#125;<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            &#123;% else %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>还没有人评论...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            &#123;% endfor %&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-medium-1-4&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-panel uk-panel-box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-text-center&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-border-circle&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;120&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;120&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123; blog.user_image &#125;&#125;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123; blog.user_name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-panel uk-panel-header&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-panel-title&quot;</span>&gt;</span>友情链接<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-list uk-list-line&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-link&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>编程<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-link&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>思考<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-link&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>读书<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><p>manage_blog_modify.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;__base__.html&#x27; %&#125;<br><br>&#123;% block title %&#125;修改日志&#123;% endblock %&#125;<br><br>&#123;% block beforehead %&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span></span><br><span class="javascript">    ID = <span class="hljs-string">&#x27;&#123;&#123; id &#125;&#125;&#x27;</span>,</span><br><span class="javascript">    action = <span class="hljs-string">&#x27;&#123;&#123; action &#125;&#125;&#x27;</span>; <span class="hljs-comment">//在handlers处理函数的返回值中定义</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initVM</span>(<span class="hljs-params">blog</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#vm&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: blog,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">submit</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">                event.preventDefault();</span><br><span class="javascript">                <span class="hljs-keyword">var</span> $form = $(<span class="hljs-string">&#x27;#vm&#x27;</span>).find(<span class="hljs-string">&#x27;form&#x27;</span>);</span><br><span class="javascript">                $form.postJSON(action, <span class="hljs-built_in">this</span>.$data, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, r</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="javascript">                        $form.showFormError(err);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        <span class="hljs-keyword">return</span> location.assign(<span class="hljs-string">&#x27;/manage/blogs&#x27;</span>);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">    $(<span class="hljs-string">&#x27;#vm&#x27;</span>).show();</span><br><span class="javascript">&#125;</span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">if</span> (ID) &#123;</span><br><span class="javascript">        getJSON(<span class="hljs-string">&#x27;/api/blogs/&#x27;</span> + ID, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, blog</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> fatal(err);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            $(<span class="hljs-string">&#x27;#loading&#x27;</span>).hide();</span><br><span class="javascript">            initVM(blog);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">        $(<span class="hljs-string">&#x27;#loading&#x27;</span>).hide();</span><br><span class="javascript">        initVM(&#123;</span><br><span class="javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">summary</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1 uk-margin-bottom&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-panel uk-panel-box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-breadcrumb&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/comments&quot;</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/blogs&quot;</span>&gt;</span>日志<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/users&quot;</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loading&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1 uk-text-center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-spinner uk-icon-medium uk-icon-spin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 正在加载...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-2-3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;submit: submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form uk-form-stacked&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-alert uk-alert-danger uk-hidden&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-label&quot;</span>&gt;</span>标题:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-controls&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;标题&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-label&quot;</span>&gt;</span>摘要:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-controls&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;summary&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;summary&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;摘要&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;resize:none;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-label&quot;</span>&gt;</span>内容:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-controls&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;16&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;内容&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;resize:none;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-button uk-button-primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-save&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/blogs&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-button&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-times&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 取消<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h2 id="12-5增添评论管理"><a href="#12-5增添评论管理" class="headerlink" title="12.5增添评论管理"></a>12.5增添评论管理</h2><p>handlers.py中，增加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/manage/&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">manage</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;redirect:/manage/comments&#x27;</span><br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/manage/comments&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">manage_commets</span>(<span class="hljs-params">*, page=<span class="hljs-string">&#x27;1&#x27;</span></span>):</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;__template__&#x27;</span>: <span class="hljs-string">&#x27;manage_comments.html&#x27;</span>,<br>        <span class="hljs-string">&#x27;page_index&#x27;</span>: get_page_index(page)<br>    &#125;<br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/api/comments&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_comments</span>(<span class="hljs-params">*, page=<span class="hljs-string">&#x27;1&#x27;</span></span>):</span><br>    page_index = get_page_index(page)<br>    num = <span class="hljs-keyword">await</span> Comment.findNumber(<span class="hljs-string">&#x27;count(id)&#x27;</span>)<br>    p = Page(num, page_index)<br>    <span class="hljs-keyword">if</span> num == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(page=p, comments=())<br>    comments = <span class="hljs-keyword">await</span> Comment.findAll(orderBy=<span class="hljs-string">&#x27;created_at desc&#x27;</span>, limit=(p.offset, p.limit))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(page=p, comments=comments)<br><br><span class="hljs-meta">@post(<span class="hljs-params"><span class="hljs-string">&#x27;/api/blogs/&#123;id&#125;/comments&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_create_comment</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, request, *, content</span>):</span><br>    user = request.__user__<br>    <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> APIPermissionError(<span class="hljs-string">&#x27;content&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> content.strip():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;content&#x27;</span>)<br>    blog = <span class="hljs-keyword">await</span> Blog.find(<span class="hljs-built_in">id</span>)<br>    <span class="hljs-keyword">if</span> blog <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> APIResourceNotFoundError(<span class="hljs-string">&#x27;Blog&#x27;</span>)<br>    comment = Comment(blog_id=blog.<span class="hljs-built_in">id</span>, user_id=user.<span class="hljs-built_in">id</span>, user_name=user.name,<br>                      user_image=user.image, content=content.strip())<br>    <span class="hljs-keyword">await</span> comment.save()<br>    <span class="hljs-keyword">return</span> comment<br><br><span class="hljs-meta">@post(<span class="hljs-params"><span class="hljs-string">&#x27;/api/comments/delete/&#123;id&#125;&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_delete_comments</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, request</span>):</span><br>    logging.info(<span class="hljs-built_in">id</span>)<br>    check_admin(request)<br>    comment = <span class="hljs-keyword">await</span> Comment.find(<span class="hljs-built_in">id</span>)<br>    <span class="hljs-keyword">if</span> comment <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> APIResourceNotFoundError(<span class="hljs-string">&#x27;comment&#x27;</span>)<br>    <span class="hljs-keyword">await</span> comment.remove()<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br></code></pre></td></tr></table></figure><p>manage_comments.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;__base__.html&#x27; %&#125;<br><br>&#123;% block title %&#125;评论&#123;% endblock %&#125;<br><br>&#123;% block beforehead %&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initVM</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">    $(<span class="hljs-string">&#x27;#vm&#x27;</span>).show();</span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#vm&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">comments</span>: data.comments,</span><br><span class="javascript">            <span class="hljs-attr">page</span>: data.page</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">delete_comment</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">comment</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> content = comment.content.length &gt; <span class="hljs-number">20</span> ? comment.content.substring(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>) + <span class="hljs-string">&#x27;...&#x27;</span> : comment.content;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (confirm(<span class="hljs-string">&#x27;确认要删除评论\n“&#x27;</span> + content + <span class="hljs-string">&#x27;”？\n删除后不可恢复！&#x27;</span>)) &#123;</span><br><span class="javascript">                    postJSON(<span class="hljs-string">&#x27;/api/comments/delete/&#x27;</span> + comment.id , <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, r</span>) </span>&#123;</span><br><span class="javascript">                        <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="javascript">                            <span class="hljs-keyword">return</span> error(err);</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                        refresh();</span><br><span class="javascript">                        <span class="hljs-comment">/*会重新reload这个页面*/</span></span><br><span class="javascript">                    &#125;);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">&#125;</span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    getJSON(<span class="hljs-string">&#x27;/api/comments&#x27;</span>, &#123;</span><br><span class="javascript">        <span class="hljs-attr">page</span>: &#123;&#123; page_index &#125;&#125;</span><br><span class="javascript">    &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, results</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> fatal(err);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        $(<span class="hljs-string">&#x27;#loading&#x27;</span>).hide();</span><br><span class="javascript">        initVM(results);</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1 uk-margin-bottom&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-panel uk-panel-box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-breadcrumb&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/blogs&quot;</span>&gt;</span>日志<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/manage/users&quot;</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loading&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1 uk-text-center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-spinner uk-icon-medium uk-icon-spin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 正在加载...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-table uk-table-hover&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-2-10&quot;</span>&gt;</span>作者<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-5-10&quot;</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-2-10&quot;</span>&gt;</span>创建时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-10&quot;</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-repeat</span>=<span class="hljs-string">&quot;comment: comments&quot;</span> &gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;comment.user_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;comment.content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;comment.created_at.toDateTime()&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#0&quot;</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;click: delete_comment(comment)&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-trash-o&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-component</span>=<span class="hljs-string">&quot;pagination&quot;</span> <span class="hljs-attr">v-with</span>=<span class="hljs-string">&quot;page&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><p><strong>代码解析：</strong></p><p><a href="https://github.com/Ah-yuan/MyWebAPP">Ah-yuan/MyWebAPP: python项目实战解析 (github.com)</a></p><p><strong>参考链接：</strong></p><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">Python教程</a></p><p><a href="https://github.com/cuizichenghome/MyWebAPP">Python教程项目实战代码注释</a></p><p><a href="https://blog.csdn.net/josephpai/category_7049397.html">Python实战</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python实战(廖雪峰)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python实战-廖雪峰-代码解析（三）</title>
    <link href="/archives/12cb596f.html"/>
    <url>/archives/12cb596f.html</url>
    
    <content type="html"><![CDATA[<h1 id="7、构建前端"><a href="#7、构建前端" class="headerlink" title="7、构建前端"></a>7、构建前端</h1><blockquote><p>HTML是骨架；javascript是肌肉；CSS是衣服。</p><p>为解决HTML代码复用，可以将复用代码提取为模板；有两种思路：</p><p>1）通过include把页面拆成多部份引用</p><p>2）“<strong>继承</strong>”模板的方式，是通过编写一个“<strong>父模板</strong>”，在父模板中定义一些可替换的block（<strong>块</strong>）。然后，编写多个“子模板”，每个子模板都可以只替换父模板定义的block。</p></blockquote><p>父模板<strong>base</strong>.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">&#123;% macro pagination(url, page) %&#125;</span><br><span class="hljs-comment">    &lt;ul class=&quot;uk-pagination&quot;&gt;</span><br><span class="hljs-comment">        &#123;% if page.has_previous %&#125;</span><br><span class="hljs-comment">            &lt;li&gt;&lt;a href=&quot;&#123;&#123; url &#125;&#125;&#123;&#123; page.page_index - 1 &#125;&#125;&quot;&gt;&lt;i class=&quot;uk-icon-angle-double-left&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="hljs-comment">        &#123;% else %&#125;</span><br><span class="hljs-comment">            &lt;li class=&quot;uk-disabled&quot;&gt;&lt;span&gt;&lt;i class=&quot;uk-icon-angle-double-left&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;</span><br><span class="hljs-comment">        &#123;% endif %&#125;</span><br><span class="hljs-comment">            &lt;li class=&quot;uk-active&quot;&gt;&lt;span&gt;&#123;&#123; page.page_index &#125;&#125;&lt;/span&gt;&lt;/li&gt;</span><br><span class="hljs-comment">        &#123;% if page.has_next %&#125;</span><br><span class="hljs-comment">            &lt;li&gt;&lt;a href=&quot;&#123;&#123; url &#125;&#125;&#123;&#123; page.page_index + 1 &#125;&#125;&quot;&gt;&lt;i class=&quot;uk-icon-angle-double-right&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="hljs-comment">        &#123;% else %&#125;</span><br><span class="hljs-comment">            &lt;li class=&quot;uk-disabled&quot;&gt;&lt;span&gt;&lt;i class=&quot;uk-icon-angle-double-right&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;</span><br><span class="hljs-comment">        &#123;% endif %&#125;</span><br><span class="hljs-comment">    &lt;/ul&gt;</span><br><span class="hljs-comment">&#123;% endmacro %&#125;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    &#123;% block meta %&#125;<span class="hljs-comment">&lt;!-- block meta  --&gt;</span>&#123;% endblock %&#125; <br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&#123;% block title %&#125; ? &#123;% endblock %&#125; - Awesome<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>#网页显示名称<br>  ....<br>    &#123;% block beforehead %&#125;<span class="hljs-comment">&lt;!-- before head  --&gt;</span>&#123;% endblock %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-navbar uk-navbar-attached uk-margin-bottom&quot;</span>&gt;</span>#最上层条目<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-container uk-container-center&quot;</span>&gt;</span> #容器<br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-navbar-brand&quot;</span>&gt;</span>Awesome<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-navbar-nav&quot;</span>&gt;</span> #模块盒子<br>                ....  #省略<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-navbar-flip&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-navbar-nav&quot;</span>&gt;</span><br>                &#123;% if __user__ %&#125; #用户名盒子，这里有个变量 __user__<br>                    ...#省略<br>                &#123;% else %&#125;<br>                    ...#省略<br>                &#123;% endif %&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-container uk-container-center&quot;</span>&gt;</span> #显示博客条目<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-grid&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- content --&gt;</span><br>            &#123;% block content %&#125;   #博客内容<br>            &#123;% endblock %&#125;<br>            <span class="hljs-comment">&lt;!-- // content --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-margin-large-top&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:#eee; border-top:1px solid #ccc;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-container uk-container-center uk-text-center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-panel uk-margin-top uk-margin-bottom&quot;</span>&gt;</span>#最下层网站分析，注释等<br>                <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>从***<em>base</em>***.html继承一个blogs.html</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">extends</span></span> &#x27;__base__.html&#x27; %&#125;</span><span class="xml"></span><br><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> title %&#125;</span><span class="xml">日志</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="xml"> #网页显示名称</span><br><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content %&#125;</span><span class="xml">#博客内容</span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-medium-3-4&quot;</span>&gt;</span>   #左3/4的部分</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> blog <span class="hljs-keyword">in</span> blogs %&#125;</span><span class="xml"></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-article&quot;</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/blog/</span></span></span><span class="hljs-template-variable">&#123;&#123; blog.id &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; blog.name &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-article-meta&quot;</span>&gt;</span>发表于</span><span class="hljs-template-variable">&#123;&#123; blog.created_at &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; blog.summary &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/blog/</span></span></span><span class="hljs-template-variable">&#123;&#123; blog.id &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>继续阅读 <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-angle-double-right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-article-divider&quot;</span>&gt;</span></span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-medium-1-4&quot;</span>&gt;</span>    #右1/4的部分</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-panel uk-panel-header&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-panel-title&quot;</span>&gt;</span>友情链接<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-list uk-list-line&quot;</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-thumbs-o-up&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>编程<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-thumbs-o-up&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>读书<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-thumbs-o-up&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Python教程<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-thumbs-o-up&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Git教程<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><p>修改handlers</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&#x27; url handlers &#x27;</span><br><br><span class="hljs-keyword">import</span> re, time, json, logging, hashlib, base64, asyncio<br><br><span class="hljs-keyword">from</span> coroweb <span class="hljs-keyword">import</span> get, post<br><br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> User, Comment, Blog, next_id<br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">request</span>):</span><br>    summary = <span class="hljs-string">&#x27;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&#x27;</span><br>    blogs = [<br>        Blog(<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;1&#x27;</span>, name=<span class="hljs-string">&#x27;Test Blog&#x27;</span>, summary=summary, created_at=time.time()-<span class="hljs-number">120</span>),<br>        Blog(<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;2&#x27;</span>, name=<span class="hljs-string">&#x27;Something New&#x27;</span>, summary=summary, created_at=time.time()-<span class="hljs-number">3600</span>),<br>        Blog(<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;3&#x27;</span>, name=<span class="hljs-string">&#x27;Learn Swift&#x27;</span>, summary=summary, created_at=time.time()-<span class="hljs-number">7200</span>)<br>    ]<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;__template__&#x27;</span>: <span class="hljs-string">&#x27;blogs.html&#x27;</span>,<br>        <span class="hljs-string">&#x27;blogs&#x27;</span>: blogs<br>    &#125;<br></code></pre></td></tr></table></figure><p>Blog的创建日期显示的是一个浮点数，因为它是由这段模板渲染出来的（blogs.html）：</p><blockquote><p>显示内容：发表于1628642411.4468637</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-article-meta&quot;</span>&gt;</span>发表于&#123;&#123; blog.created_at &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解决方法是通过jinja2的filter（过滤器），把一个浮点数转换成日期字符串：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-article-meta&quot;</span>&gt;</span>发表于&#123;&#123; blog.created_at|datetime &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>app.py增添内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">datetime_filter</span>(<span class="hljs-params">t</span>):</span><br>    delta = <span class="hljs-built_in">int</span>(time.time() - t)<br>    <span class="hljs-keyword">if</span> delta &lt; <span class="hljs-number">60</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">u&#x27;1分钟前&#x27;</span><br>    <span class="hljs-keyword">if</span> delta &lt; <span class="hljs-number">3600</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">u&#x27;%s分钟前&#x27;</span> % (delta//<span class="hljs-number">60</span>)<br>    <span class="hljs-keyword">if</span> delta &lt; <span class="hljs-number">86400</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">u&#x27;%s小时前&#x27;</span> % (delta//<span class="hljs-number">3600</span>)<br>    <span class="hljs-keyword">if</span> delta &lt; <span class="hljs-number">604800</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">u&#x27;%s天前&#x27;</span> % (delta//<span class="hljs-number">86400</span>)<br>    dt = datetime.fromtimestamp(t)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">u&#x27;%s年%s月%s日&#x27;</span> % (dt.year, dt.month, dt.day)<br></code></pre></td></tr></table></figure><p>app.py中增添async def init(loop) jinja2模板中datetime过滤器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">init__jinja2(app, filters=<span class="hljs-built_in">dict</span>(datetime=datetime_filter))<br></code></pre></td></tr></table></figure><h1 id="8、编写API"><a href="#8、编写API" class="headerlink" title="8、编写API"></a>8、编写API</h1><blockquote><p>API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p></blockquote><p>应用API的任务一方面是通信，另一方面是对获取的信息解析。主流格式是XML和JSON，其中JSON近年来最为流行。由于JSON能直接被JavaScript读取，所以，以JSON格式编写的REST风格的API具有简单、易读、易用的特点。如果一个URL返回的不是HTML，而是机器能直接解析的数据，这个URL就可以看成是一个Web API。</p><p><strong>编写API有什么好处呢？</strong>由于API就是把Web App的功能全部封装了，所以，通过API操作数据，可以极大地把前端和后端的代码隔离，使得后端代码易于测试，前端代码编写更简单。</p><blockquote><p>先定义APIError，当API调用时发生逻辑错误，分类处理</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">JSON API definition</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> inspect<br><span class="hljs-keyword">import</span> functools<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Json API definition</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment">#在apis.py中定义一个Page类用于存储分页信息</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Page</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Page object for display pages.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, item_count, page_index=<span class="hljs-number">1</span>, page_size=<span class="hljs-number">10</span></span>):</span><br>        <span class="hljs-comment"># item_count 文章的总数</span><br>        <span class="hljs-comment"># page_size 每页显示的文章数量</span><br>        <span class="hljs-comment"># page_count 需要多少页将文章显示出来</span><br>        self.item_count = item_count<br>        self.page_size = page_size<br>        self.page_count = item_count // page_size + (<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> item_count % page_size &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">if</span> (item_count == <span class="hljs-number">0</span>) <span class="hljs-keyword">or</span> (page_index &gt; self.page_count):<br>            self.offset = <span class="hljs-number">0</span><br>            self.limit = <span class="hljs-number">0</span><br>            self.page_index = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># page_index 待查看那一页</span><br>            self.page_index = page_index<br>            self.offset = self.page_size * (page_index - <span class="hljs-number">1</span>)<br>            self.limit = self.page_size  <span class="hljs-comment"># 这里有待改进</span><br>        self.has_next = self.page_index &lt; self.page_count<br>        self.has_previous = self.page_index &gt; <span class="hljs-number">1</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;item_count: %s, page_count: %s, page_index: %s, page_size: %s, offset:%s, limit:%s&#x27;</span> \<br>                % (self.item_count, self.page_count, self.page_index, self.page_size, self.offset, self.limit)<br><br>    __repr__ = __str__<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">APIError</span>(<span class="hljs-params">Exception</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    the base APIError which contains error(required), data(optional) and message(optional).</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, error, data=<span class="hljs-string">&#x27;&#x27;</span>, message=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-built_in">super</span>(APIError, self).__init__(message)<br>        self.error = error<br>        self.data = data<br>        self.message = message<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">APIValueError</span>(<span class="hljs-params">APIError</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Indicate the input value has error or invalid.The data specifies the error field of input form.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, field, message=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-built_in">super</span>(APIValueError, self).__init__(<span class="hljs-string">&#x27;value:invalid&#x27;</span>, field, message)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">APIResourceNotFoundError</span>(<span class="hljs-params">APIValueError</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Indicate the resource was not found. The data specifies the resource name.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, field, message=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-built_in">super</span>(APIResourceNotFoundError, self).__init__(<span class="hljs-string">&#x27;value:invalid&#x27;</span>, field, message)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">APIPermissionError</span>(<span class="hljs-params">APIError</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Indicate the api has no permission.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, message</span>):</span><br>        <span class="hljs-built_in">super</span>(APIPermissionError, self).__init__(<span class="hljs-string">&#x27;permission:forbidden&#x27;</span>, <span class="hljs-string">&#x27;permission&#x27;</span>, message)<br></code></pre></td></tr></table></figure><p>一个API也是一个URL的处理函数，我们希望能直接通过一个@api来把函数变成JSON格式的REST API。例如，获取注册用户可以用一个API实现如下：</p><p>handlers.py新增内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&#x27; url handlers &#x27;</span><br><br><span class="hljs-keyword">import</span> re, time, json, logging, hashlib, base64, asyncio<br><br><span class="hljs-keyword">from</span> coroweb <span class="hljs-keyword">import</span> get, post<br><br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> User, Comment, Blog, next_id<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_page_index</span>(<span class="hljs-params">page_str</span>):</span><span class="hljs-comment">#获取当前所在页码</span><br>    p = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">try</span>:<br>        p = <span class="hljs-built_in">int</span>(page_str)<br>    <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">if</span> p &lt; <span class="hljs-number">1</span>:<br>        p = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p<br><br><span class="hljs-comment">#获取注册用户</span><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/api/users&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_get_users</span>(<span class="hljs-params">*, page=<span class="hljs-string">&#x27;1&#x27;</span></span>):</span><br>    page_index = get_page_index(page)<br>    <span class="hljs-comment"># count为MySQL中的聚集函数，用于计算某列的行数</span><br>    <span class="hljs-comment"># user_count代表了有多个用户id</span><br>    user_count = <span class="hljs-keyword">await</span> User.findNumber(<span class="hljs-string">&#x27;count(id)&#x27;</span>)<br>    p = Page(user_count, page_index)<br>    <span class="hljs-comment"># 通过Page类来计算当前页的相关信息, 其实是数据库limit语句中的offset，limit</span><br>    <span class="hljs-keyword">if</span> user_count == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(page=p, users=())<br>    <span class="hljs-comment"># page.offset表示从那一行开始检索，page.limit表示检索多少行</span><br>    users = <span class="hljs-keyword">await</span> User.findAll(orderBy=<span class="hljs-string">&#x27;created_at desc&#x27;</span>, limit=(p.offset, p.limit))<br><br>    <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> users:<br>        u.passwd = <span class="hljs-string">&#x27;*******&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(page=p, users=users)<br></code></pre></td></tr></table></figure><p>只要返回一个dict，通过app.py中response_factory这个middleware就可以把结果序列化为JSON并返回。</p><h1 id="9、用户管理"><a href="#9、用户管理" class="headerlink" title="9、用户管理"></a>9、用户管理</h1><p>用户管理涉及到用户注册和登录。</p><h2 id="9-1-用户注册"><a href="#9-1-用户注册" class="headerlink" title="9.1 用户注册"></a>9.1 用户注册</h2><p>API与MVC的区别：</p><blockquote><p>mvc主要用于建站，web api主要用于构建http服务，API更抽象，更不注重View的生成。</p></blockquote><p>编写的API必须有以下几点功能：</p><blockquote><p>验证注册信息<br>对用户密码进行加密，这里使用SHA1单向算法，并储存到数据库<br>发送对应的cookie到浏览器</p></blockquote><p>在handlers.py中编写注册部分代码，修改handlers</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&#x27; url handlers &#x27;</span><br><br><span class="hljs-keyword">import</span> re, time, json, hashlib<br><span class="hljs-keyword">from</span> aiohttp <span class="hljs-keyword">import</span> web<br><span class="hljs-keyword">from</span> apis <span class="hljs-keyword">import</span> Page, APIValueError, APIError<br><span class="hljs-keyword">from</span> config <span class="hljs-keyword">import</span> configs<br><span class="hljs-keyword">from</span> coroweb <span class="hljs-keyword">import</span> get, post<br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> User, Blog, next_id<br><br>_RE_EMAIL = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;^[0-9a-z\.\_\-]+\@[a-z0-9\-\_]+(\.[a-z0-9\-\_]+)&#123;1,4&#125;$&#x27;</span>)<br>_RE_SHA1 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;^[0-9a-f]&#123;40&#125;$&#x27;</span>)<br>COOKIE_NAME = <span class="hljs-string">&#x27;myblogsession&#x27;</span> <span class="hljs-comment">#用来在set_cookie中命名</span><br>_COOKIE_KEY = configs.session.secret <span class="hljs-comment">#导入默认设置</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">user2cookie</span>(<span class="hljs-params">user, max_age</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Generate cookie str by user(id-expires-sha1).</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># build cookie string by: id-expires-sha1</span><br>    <span class="hljs-comment"># 过期时间是创建时间+存活时间</span><br>    expires = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(time.time() + max_age))<br>    s = <span class="hljs-string">&#x27;%s-%s-%s-%s&#x27;</span> % (user.<span class="hljs-built_in">id</span>, user.passwd, expires, _COOKIE_KEY)<br>    <span class="hljs-comment"># SHA1是一种单向算法，可以通过原始字符串计算出SHA1结果，但无法通过SHA1结果反推出原始字符串。</span><br>    L = [user.<span class="hljs-built_in">id</span>, expires, hashlib.sha1(s.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;-&#x27;</span>.join(L)<br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/register&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">register</span>():</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&quot;__template__&quot;</span>: <span class="hljs-string">&#x27;register.html&#x27;</span><br>    &#125;<br><br><span class="hljs-meta">@post(<span class="hljs-params"><span class="hljs-string">&#x27;/api/users&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">api_register_user</span>(<span class="hljs-params">*, email, name, passwd</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> name.strip():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> email <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> _RE_EMAIL.match(email):<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;email&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> passwd <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> _RE_SHA1.match(passwd):<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;passwd&#x27;</span>)<br><br>    <span class="hljs-comment"># 该邮箱是否已注册</span><br>    users = <span class="hljs-keyword">await</span> User.findAll(<span class="hljs-string">&#x27;email=?&#x27;</span>, [email])<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(users) &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">raise</span> APIError(<span class="hljs-string">&#x27;register:failed&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;Email is already in use.&#x27;</span>)<br><br>    uid = next_id()<br>    <span class="hljs-comment"># 数据库中存储的passwd是经过SHA1计算后的40位Hash字符串，所以服务器端并不知道用户的原始口令。</span><br>    sha1_passwd = <span class="hljs-string">&#x27;%s:%s&#x27;</span> % (uid, passwd)<br>    user = User(<span class="hljs-built_in">id</span>=uid, name=name.strip(), email=email, passwd=hashlib.sha1(sha1_passwd.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest(),<br>                image=<span class="hljs-string">&#x27;http://www.gravatar.com/avatar/%s?d=mm&amp;s=120&#x27;</span> % hashlib.md5(email.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest())<br>    <span class="hljs-keyword">await</span> user.save()<br><br>    <span class="hljs-comment"># make session cookie:</span><br>    <span class="hljs-comment"># 制作cookie返回浏览器客户端</span><br>    r = web.Response()<br>    r.set_cookie(COOKIE_NAME, user2cookie(user, <span class="hljs-number">86400</span>), max_age=<span class="hljs-number">86400</span>, httponly=<span class="hljs-literal">True</span>)<br>    user.passwd = <span class="hljs-string">&#x27;********&#x27;</span><br>    r.content_type = <span class="hljs-string">&#x27;application/json&#x27;</span><br>    r.body = json.dumps(user, ensure_ascii=<span class="hljs-literal">False</span>).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> r<br></code></pre></td></tr></table></figure><p>注册页面register.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;__base__.html&#x27; %&#125;<br><br>&#123;% block title %&#125;注册&#123;% endblock %&#125;<br><br>&#123;% block beforehead %&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">validateEmail</span>(<span class="hljs-params">email</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/^[a-z0-9\.\-\_]+\@[a-z0-9\-\_]+(\.[a-z0-9\-\_]+)&#123;1,4&#125;$/</span>;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> re.test(email.toLowerCase());</span><br><span class="javascript">&#125;</span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#vm&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">password1</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">password2</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">submit</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">                event.preventDefault();</span><br><span class="javascript">                <span class="hljs-keyword">var</span> $form = $(<span class="hljs-string">&#x27;#vm&#x27;</span>);</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (! <span class="hljs-built_in">this</span>.name.trim()) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> $form.showFormError(<span class="hljs-string">&#x27;请输入名字&#x27;</span>);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (! validateEmail(<span class="hljs-built_in">this</span>.email.trim().toLowerCase())) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> $form.showFormError(<span class="hljs-string">&#x27;请输入正确的Email地址&#x27;</span>);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.password1.length &lt; <span class="hljs-number">6</span>) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> $form.showFormError(<span class="hljs-string">&#x27;口令长度至少为6个字符&#x27;</span>);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.password1 !== <span class="hljs-built_in">this</span>.password2) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> $form.showFormError(<span class="hljs-string">&#x27;两次输入的口令不一致&#x27;</span>);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> email = <span class="hljs-built_in">this</span>.email.trim().toLowerCase();</span><br><span class="javascript">                $form.postJSON(<span class="hljs-string">&#x27;/api/users&#x27;</span>, &#123;</span><br><span class="javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-built_in">this</span>.name.trim(),</span><br><span class="javascript">                    <span class="hljs-attr">email</span>: email,</span><br><span class="javascript">                    <span class="hljs-attr">passwd</span>: CryptoJS.SHA1(email + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">this</span>.password1).toString()</span><br><span class="javascript">                &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, r</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="javascript">                        <span class="hljs-keyword">return</span> $form.showFormError(err);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> location.assign(<span class="hljs-string">&#x27;/&#x27;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">    $(<span class="hljs-string">&#x27;#vm&#x27;</span>).show();</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-2-3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎注册！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vm&quot;</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;submit: submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form uk-form-stacked&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-alert uk-alert-danger uk-hidden&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-label&quot;</span>&gt;</span>名字:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-controls&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;名字&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-label&quot;</span>&gt;</span>电子邮件:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-controls&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;your-name@example.com&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-label&quot;</span>&gt;</span>输入口令:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-controls&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;password1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入口令&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-label&quot;</span>&gt;</span>重复口令:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-controls&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;password2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;重复口令&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-button uk-button-primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 注册<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h2 id="9-2-用户登录"><a href="#9-2-用户登录" class="headerlink" title="9.2 用户登录"></a>9.2 用户登录</h2><p>用户登录比用户注册复杂。由于HTTP协议是一种无状态协议，而服务器要跟踪用户状态，就只能通过cookie实现。大多数Web框架提供了Session功能来封装保存用户状态的cookie。Session的优点是简单易用，可以直接从Session中取出用户登录信息。采用直接读取cookie的方式来验证用户登录，每次用户访问任意URL，都会对cookie进行验证，这种方式的好处是<strong>保证服务器处理任意的URL都是无状态的，可以扩展到多台服务器</strong>。</p><p>由于登录成功后是由服务器生成一个cookie发送给浏览器，所以，要保证这个cookie不会被客户端伪造出来。</p><p>实现防伪造cookie的关键是通过一个单向算法（例如SHA1）</p><p>在编写登录界面是，我们发现当一个正确的密码输入，会经历以下步骤：</p><p>首先会由网页中的JavaScript取得对应的值，并按照如下组合方式，进行摘要算法计算出一个字符串(A)：</p><p><code>&quot;email&quot; + &quot;:&quot; + &quot;passwd&quot;</code><br>然后字符串(A)被以密码的形式传递到API内，在API内，字符串(A)再一次按照如下组合方式，进行摘要算法计算出一个字符串(B)，并保存到服务器数据库上。</p><p><code>&quot;用户id&quot; + &quot;:&quot; + 字串符(A)</code><br>到了最后制作cookie发送给浏览器时，又使用字符串(B)按照如下组合方式，进行摘要算法计算出一个字符串(C)：</p><p><code>&quot;用户id&quot; + 字串符(B) + &quot;到期时间&quot; + &quot;密匙&quot;</code><br>最后再按照如下组合方式，生成一个字串符(D)发送给浏览器</p><p><code>用户id&quot; + &quot;到期时间&quot; + 字符串(C)</code><br>所以浏览器实际收到的信息有：用户id、过期时间、SHA1值(字串符(C))</p><p>在cookie未到过期的期间，当服务器验证cookie是否伪造时，其实只需根据用户信息在数据库查找相应的用户口令(即字符串(B))，再使用其进行摘要算法与cookie中的字符串(C)比较是否等价，就可以知道是否伪造了。算法的关键在于SHA1是一种单向算法，即可以通过原始字符串计算出SHA1结果，但无法通过SHA1结果反推出原始字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&#x27; url handlers &#x27;</span><br><br><span class="hljs-keyword">import</span> re, time, json, hashlib<br><span class="hljs-keyword">from</span> aiohttp <span class="hljs-keyword">import</span> web<br><span class="hljs-keyword">from</span> apis <span class="hljs-keyword">import</span> Page, APIValueError, APIError<br><span class="hljs-keyword">from</span> config <span class="hljs-keyword">import</span> configs<br><span class="hljs-keyword">from</span> coroweb <span class="hljs-keyword">import</span> get, post<br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> User, Blog, next_id<br><br><span class="hljs-comment">#登录</span><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/signin&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">signin</span>():</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&quot;__template__&quot;</span>: <span class="hljs-string">&#x27;signin.html&#x27;</span><br>    &#125;<br><br><span class="hljs-meta">@post(<span class="hljs-params"><span class="hljs-string">&#x27;/api/authenticate&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span>(<span class="hljs-params">*, email, passwd</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> email:<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;Invalid email.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> passwd:<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;passwd&#x27;</span>, <span class="hljs-string">&#x27;Invalid password.&#x27;</span>)<br>    users = <span class="hljs-keyword">await</span> User.findAll(<span class="hljs-string">&#x27;email=?&#x27;</span>, [email])<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(users) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;Email not exist.&#x27;</span>)<br>    user = users[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># 在Python 3.x版本中，把&#x27;xxx&#x27;和u&#x27;xxx&#x27;统一成Unicode编码，即写不写前缀u都是一样的，</span><br>    <span class="hljs-comment"># 而以字节形式表示的字符串则必须加上b前缀：b&#x27;xxx&#x27;。</span><br>    <span class="hljs-comment"># sha1 = hashlib.sha1()</span><br>    <span class="hljs-comment"># sha1.update(user.id.encode(&#x27;utf-8&#x27;))</span><br>    <span class="hljs-comment"># sha1.update(b&#x27;:&#x27;)</span><br>    <span class="hljs-comment"># sha1.update(passwd.encode(&#x27;utf-8&#x27;))</span><br><br>    <span class="hljs-comment"># 检查密码,把登录密码转化格式并进行摘要算法</span><br>    browser_sha1_passwd = <span class="hljs-string">&#x27;%s:%s&#x27;</span> % (user.<span class="hljs-built_in">id</span>, passwd)<br>    browser_sha1 = hashlib.sha1(browser_sha1_passwd.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-keyword">if</span> user.passwd != browser_sha1.hexdigest():<br>        <span class="hljs-keyword">raise</span> APIValueError(<span class="hljs-string">&#x27;passwd&#x27;</span>, <span class="hljs-string">&#x27;Invalid password&#x27;</span>)<br><br>    <span class="hljs-comment"># authenticate ok, set cookie</span><br>    <span class="hljs-comment">#制作cookie发送给浏览器，这步骤与注册用户一样</span><br>    r = web.Response()<br>    r.set_cookie(COOKIE_NAME, user2cookie(user, <span class="hljs-number">86400</span>), max_age=<span class="hljs-number">86400</span>, httponly=<span class="hljs-literal">True</span>)<br>    user.passwd = <span class="hljs-string">&quot;********&quot;</span><br>    r.content_type = <span class="hljs-string">&#x27;application/json&#x27;</span><br>    r.body = json.dumps(user, ensure_ascii=<span class="hljs-literal">False</span>).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> r<br></code></pre></td></tr></table></figure><p>对于每个URL处理函数，如果我们都去写解析cookie的代码，那会导致代码重复很多次。</p><p>解决方法：利用middle在处理URL之前，把cookie解析出来，并将登录用户绑定到request对象上，这样，后续的URL处理函数就可以直接拿到登录用户：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#handlers.py</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cookie2user</span>(<span class="hljs-params">cookie_str</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Parse cookie and load user if cookie is valid.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cookie_str:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">try</span>:<br>        L = cookie_str.split(<span class="hljs-string">&#x27;-&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(L) != <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        uid, expires, sha1 = L<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(expires) &lt; time.time():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        user = <span class="hljs-keyword">await</span> User.find(uid)<br>        <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        s = <span class="hljs-string">&#x27;%s-%s-%s-%s&#x27;</span> % (uid, user.passwd, expires, _COOKIE_KEY)<br>        <span class="hljs-keyword">if</span> sha1 != hashlib.sha1(s.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest():<br>            logging.info(<span class="hljs-string">&#x27;invalid sha1&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        user.passwd = <span class="hljs-string">&#x27;********&#x27;</span><br>        <span class="hljs-keyword">return</span> user<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logging.exception(e)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cookie2user</span>(<span class="hljs-params">cookie_str</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Parse cookie and load user if cookie is valid.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cookie_str:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">try</span>:<br>        L = cookie_str.split(<span class="hljs-string">&#x27;-&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(L) != <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        uid, expires, sha1 = L<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(expires) &lt; time.time():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        user = <span class="hljs-keyword">await</span> User.find(uid)<br>        <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        s = <span class="hljs-string">&#x27;%s-%s-%s-%s&#x27;</span> % (uid, user.passwd, expires, _COOKIE_KEY)<br>        <span class="hljs-keyword">if</span> sha1 != hashlib.sha1(s.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest():<br>            logging.info(<span class="hljs-string">&#x27;invalid sha1&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        user.passwd = <span class="hljs-string">&#x27;********&#x27;</span><br>        <span class="hljs-keyword">return</span> user<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logging.exception(e)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>编写middleware，提取并解析cookie并绑定在request对象上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#apps.py中新增</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">auth_factory</span>(<span class="hljs-params">app, handler</span>):</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">auth</span>(<span class="hljs-params">request</span>):</span><br>        logging.info(<span class="hljs-string">&#x27;check user:%s %s&#x27;</span> % (request.method, request.path))<br>        request.__user__ = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># cookies是用分号分割的一组名值对，在python中被看成dict</span><br>        cookie_str = request.cookies.get(COOKIE_NAME)<br>        <span class="hljs-keyword">if</span> cookie_str:<br>            user = <span class="hljs-keyword">await</span> cookie2user(cookie_str)<br>            <span class="hljs-built_in">print</span>(user)<br>            <span class="hljs-keyword">if</span> user:<br>                logging.info(<span class="hljs-string">&#x27;set current user:%s&#x27;</span> % user.email)<br>                request.__user__ = user<br>        <span class="hljs-keyword">if</span> request.path.startswith(<span class="hljs-string">&#x27;/manage/&#x27;</span>) <span class="hljs-keyword">and</span> (request.__user__ <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> request.__user__.admin):<br>            <span class="hljs-keyword">return</span> web.HTTPFound(<span class="hljs-string">&#x27;/signin&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> handler(request)<br>    <span class="hljs-keyword">return</span> auth<br></code></pre></td></tr></table></figure><p>signin.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-height-1-1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/css/uikit.min.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/css/uikit.gradient.min.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/sha1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/uikit.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/awesome.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> vmAuth = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#vm&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">passwd</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">submit</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">                event.preventDefault();</span><br><span class="javascript">                <span class="hljs-keyword">var</span></span><br><span class="javascript">                    $form = $(<span class="hljs-string">&#x27;#vm&#x27;</span>),</span><br><span class="javascript">                    email = <span class="hljs-built_in">this</span>.email.trim().toLowerCase(),</span><br><span class="javascript">                    data = &#123;</span><br><span class="javascript">                        <span class="hljs-attr">email</span>: email,</span><br><span class="javascript">                        <span class="hljs-attr">passwd</span>: <span class="hljs-built_in">this</span>.passwd===<span class="hljs-string">&#x27;&#x27;</span> ? <span class="hljs-string">&#x27;&#x27;</span> : CryptoJS.SHA1(email + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">this</span>.passwd).toString()</span><br><span class="javascript">                    &#125;;</span><br><span class="javascript">                $form.postJSON(<span class="hljs-string">&#x27;/api/authenticate&#x27;</span>, data, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (! err) &#123;</span><br><span class="javascript">                        location.assign(<span class="hljs-string">&#x27;/&#x27;</span>);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-height-1-1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-vertical-align uk-text-center uk-height-1-1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-vertical-align-middle&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 320px&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-button&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-html5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>欢迎登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vm&quot;</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;submit: submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-panel uk-panel-box uk-form&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-alert uk-alert-danger uk-hidden&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-icon uk-width-1-1&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-envelope-o&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;电子邮件&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1 uk-form-large&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-icon uk-width-1-1&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-lock&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;passwd&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;passwd&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;口令&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1 uk-form-large&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-row&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-width-1-1 uk-button uk-button-primary uk-button-large&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-icon-sign-in&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>登录后发现不能显示用户，将app.py中以下内容取消注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">r[<span class="hljs-string">&#x27;__user__&#x27;</span>] = request.__user__<br></code></pre></td></tr></table></figure><p><strong>代码解析：</strong></p><p><a href="https://github.com/Ah-yuan/MyWebAPP">Ah-yuan/MyWebAPP: python项目实战解析 (github.com)</a></p><p><strong>参考链接：</strong></p><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">Python教程</a></p><p><a href="https://github.com/cuizichenghome/MyWebAPP">Python教程项目实战代码注释</a></p><p><a href="https://blog.csdn.net/josephpai/category_7049397.html">Python实战</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python实战(廖雪峰)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python实战-廖雪峰-代码解析（二）</title>
    <link href="/archives/5fd5fa3d.html"/>
    <url>/archives/5fd5fa3d.html</url>
    
    <content type="html"><![CDATA[<h1 id="4、编写Web框架"><a href="#4、编写Web框架" class="headerlink" title="4、编写Web框架"></a>4、编写Web框架</h1><p>参考链接：</p><h2 id="4-1web框架"><a href="#4-1web框架" class="headerlink" title="4.1web框架"></a>4.1web框架</h2><p><strong>web程序工作流程</strong>：</p><blockquote><p>用户访问网址（URL）——–浏览器便生成对应的HTTP请求——–Web服务器接收请求——–通过WSGI将HTTP格式的请求数据转换成我们的Flask程序能够使用的Python数据——–Flask根据请求的URL执行<strong>对应的视图函数</strong>，获取返回值生成响应。——–响应依次经过WSGI转换生成HTTP响应——–请求的客户端接收——–浏览器渲染响应中包含的HTML和CSS代码，并执行Java Script代码，最终把解析后的页面呈现在用户浏览器的窗口中。</p></blockquote><blockquote><p><strong>路由匹配</strong>：建立不同的URL和<strong>视图函数</strong>的映射关系。根据<strong>GET,POST等HTTP方法</strong>类型决定返回给客户端的具体页面。</p></blockquote><p>Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。<br>URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。</p><p>需要实现的功能</p><blockquote><p>针对GET、POST，将path和<strong>URL规则</strong>建立关系;</p><p>定义RequestHandler从从web.request对象中获取必要的参数</p><p>添加静态文件</p><p>实现注册一个URL处理函数，实现批量注册</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> inspect<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> functools<br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><span class="hljs-keyword">from</span> aiohttp <span class="hljs-keyword">import</span> web<br><span class="hljs-keyword">from</span> apis <span class="hljs-keyword">import</span> APIError<br><br><br><span class="hljs-comment"># 为了向装饰器传递参数，必须使用另外一个函数（在这里为get）来创建装饰器</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">path</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Define decorator @get(&#x27;/path&#x27;)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decorator</span>(<span class="hljs-params">func</span>):</span><br><span class="hljs-meta">        @functools.wraps(<span class="hljs-params">func</span>)</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">*args, **kw</span>):</span><br>            <span class="hljs-keyword">return</span> func(*args, **kw)<br>        wrapper.__method__ = <span class="hljs-string">&#x27;GET&#x27;</span><br>        wrapper.__route__ = path<br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> decorator<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">path</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Define decorator @post(&#x27;/path&#x27;)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decorator</span>(<span class="hljs-params">func</span>):</span><br><span class="hljs-meta">        @functools.wraps(<span class="hljs-params">func</span>)</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">*args, **kw</span>):</span><br>            <span class="hljs-keyword">return</span> func(*args, **kw)<br>        wrapper.__method__ = <span class="hljs-string">&#x27;POST&#x27;</span><br>        wrapper.__route__ = path<br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> decorator<br><br><br><span class="hljs-comment"># --- 使用inspect模块中的signature方法来获取函数的参数，实现一些复用功能--</span><br><span class="hljs-comment"># inspect.Parameter 的类型有5种：</span><br><span class="hljs-comment"># POSITIONAL_ONLY只能是位置参数</span><br><span class="hljs-comment"># KEYWORD_ONLY关键字参数且提供了key</span><br><span class="hljs-comment"># VAR_POSITIONAL相当于是 *args</span><br><span class="hljs-comment"># VAR_KEYWORD相当于是 **kw</span><br><span class="hljs-comment"># POSITIONAL_OR_KEYWORD可以是位置参数也可以是关键字参数</span><br><br><span class="hljs-comment">#收集没有默认值的命名关键字参数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_required_kw_args</span>(<span class="hljs-params">fn</span>):</span><br>    args = []<br>    params = inspect.signature(fn).parameters<br>    <span class="hljs-comment"># 如果url处理函数需要传入关键字参数，且默认是空的话，获取这个key</span><br>    <span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> params.items():<br>        <span class="hljs-keyword">if</span> param.kind == inspect.Parameter.KEYWORD_ONLY <span class="hljs-keyword">and</span> param.default == inspect.Parameter.empty:<br>            args.append(name)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">tuple</span>(args)<br><br><span class="hljs-comment">#获取命名关键字参数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_named_kw_args</span>(<span class="hljs-params">fn</span>):</span><br>    args = []<br>    params = inspect.signature(fn).parameters<br>    <span class="hljs-comment"># 如果url处理函数需要传入关键字参数，获取这个key</span><br>    <span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> params.items():<br>        <span class="hljs-keyword">if</span> param.kind == inspect.Parameter.KEYWORD_ONLY:<br>            args.append(name)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">tuple</span>(args)<br><br><span class="hljs-comment">#判断有没有命名关键字参数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">has_named_kw_args</span>(<span class="hljs-params">fn</span>):</span><br>    params = inspect.signature(fn).parameters<br>    <span class="hljs-comment"># 判断是否有关键字参数</span><br>    <span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> params.items():<br>        <span class="hljs-keyword">if</span> param.kind == inspect.Parameter.KEYWORD_ONLY:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-comment">#判断有没有关键字参数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">has_var_kw_arg</span>(<span class="hljs-params">fn</span>):</span><br>    params = inspect.signature(fn).parameters<br>    <span class="hljs-comment"># 判断是否有关键字变长参数，VAR_KEYWORD对应**kw</span><br>    <span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> params.items():<br>        <span class="hljs-keyword">if</span> param.kind == inspect.Parameter.VAR_KEYWORD:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-comment">#判断是否含有名叫&#x27;request&#x27;参数，且该参数是否为最后一个参数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">has_request_arg</span>(<span class="hljs-params">fn</span>):</span><br>    sig = inspect.signature(fn)<br>    params = sig.parameters<br>    found = <span class="hljs-literal">False</span><br>    <span class="hljs-comment"># 判断是否存在一个参数叫做request，并且该参数要在其他普通的位置参数之后</span><br>    <span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> params.items():<br>        <span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;request&#x27;</span>:<br>            found = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> found <span class="hljs-keyword">and</span> (param.kind != inspect.Parameter.VAR_POSITIONAL <span class="hljs-keyword">and</span> param.kind != inspect.Parameter.KEYWORD_ONLY<br>                      <span class="hljs-keyword">and</span> param.kind != inspect.Parameter.VAR_KEYWORD):<br>            <span class="hljs-comment"># 如果判断为True，则表明param只能是位置参数POSITIONAL_ONLY</span><br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;request parameter must be the last named parameter in function: %s%s&#x27;</span><br>                             % (fn.__name__, <span class="hljs-built_in">str</span>(sig)))<br>    <span class="hljs-keyword">return</span> found<br><br><br><span class="hljs-comment"># RequestHandler目的就是从URL处理函数（如handlers.index）中分析其需要接收的参数，从web.request对象中获取必要的参数，</span><br><span class="hljs-comment"># 调用URL处理函数，然后把结果转换为web.Response对象，这样，就完全符合aiohttp框架的要求</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestHandler</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><span class="hljs-comment">#接受app参数</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, app, fn</span>):</span><br>        self._app = app<br>        self._func = fn<br>        self._has_request_arg = has_request_arg(fn)<br>        self._has_var_kw_arg = has_var_kw_arg(fn)<br>        self._has_named_kw_args = has_named_kw_args(fn)<br>        self._named_kw_args = get_named_kw_args(fn)<br>        self._required_kw_args = get_required_kw_args(fn)<br><br>    <span class="hljs-comment"># 1.定义kw对象，用于保存参数</span><br>    <span class="hljs-comment"># 2.判断URL处理函数是否存在参数，如果存在则根据是POST还是GET方法将request请求内容保存到kw</span><br>    <span class="hljs-comment"># 3.如果kw为空(说明request没有请求内容)，则将match_info列表里面的资源映射表赋值给kw；如果不为空则把命名关键字参数的内容给kw</span><br>    <span class="hljs-comment"># 4.完善_has_request_arg和_required_kw_args属性</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, request</span>):</span><br>        kw = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># 如果有需要处理的参数</span><br>        <span class="hljs-keyword">if</span> self._has_var_kw_arg <span class="hljs-keyword">or</span> self._has_named_kw_args <span class="hljs-keyword">or</span> self._required_kw_args:<br>            <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> request.content_type:<br>                    <span class="hljs-keyword">return</span> web.HTTPBadRequest(<span class="hljs-string">&#x27;Missing Content-Type.&#x27;</span>)<br>                ct = request.content_type.lower()<br>                <span class="hljs-keyword">if</span> ct.startswith(<span class="hljs-string">&#x27;application/json&#x27;</span>):<br>                    params = <span class="hljs-keyword">await</span> request.json()<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(params, <span class="hljs-built_in">dict</span>):<br>                        <span class="hljs-keyword">return</span> web.HTTPBadRequest(<span class="hljs-string">&#x27;JSON body must be object.&#x27;</span>)<br>                    kw = params<br>                <span class="hljs-keyword">elif</span> ct.startswith(<span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>) <span class="hljs-keyword">or</span> ct.startswith(<span class="hljs-string">&#x27;multipart/form-data&#x27;</span>):<br>                    params = <span class="hljs-keyword">await</span> request.post()<br>                    kw = <span class="hljs-built_in">dict</span>(**params)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> web.HTTPBadRequest(<span class="hljs-string">&#x27;Unsupported Content-Type: %s&#x27;</span> % request.content_type)<br>            <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>                qs = request.query_string<br>                <span class="hljs-keyword">if</span> qs:<br>                    kw = <span class="hljs-built_in">dict</span>()<br>                    <span class="hljs-comment"># 解析url中?后面的键值对内容保存到request_content</span><br>                    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                    qs = &#x27;first=f,s&amp;second=s&#x27;</span><br><span class="hljs-string">                    parse.parse_qs(qs, True).items()</span><br><span class="hljs-string">                    &gt;&gt;&gt; dict([(&#x27;first&#x27;, [&#x27;f,s&#x27;]), (&#x27;second&#x27;, [&#x27;s&#x27;])])</span><br><span class="hljs-string">                    &#x27;&#x27;&#x27;</span><br>                    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> parse.parse_qs(qs, <span class="hljs-literal">True</span>).items():<br>                        kw[k] = v[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> kw <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-comment"># 参数为空说明没有从request对象中获取到参数,或者URL处理函数没有参数</span><br>            <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            def hello(request):</span><br><span class="hljs-string">                    text = &#x27;&lt;h1&gt;hello, %s!&lt;/h1&gt;&#x27; % request.match_info[&#x27;name&#x27;]</span><br><span class="hljs-string">                    return web.Response()</span><br><span class="hljs-string">            app.router.add_route(&#x27;GET&#x27;, &#x27;/hello/&#123;name&#125;&#x27;, hello)</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            <span class="hljs-string">&#x27;&#x27;&#x27;if not self._has_var_kw_arg and not self._has_kw_arg and not self._required_kw_args:</span><br><span class="hljs-string">                # 当URL处理函数没有参数时，将request.match_info设为空，防止调用出错</span><br><span class="hljs-string">                request_content = dict()</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            kw = <span class="hljs-built_in">dict</span>(**request.match_info)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self._has_var_kw_arg <span class="hljs-keyword">and</span> self._named_kw_args:<br>                <span class="hljs-comment"># remove all unamed kw， 从request_content中删除URL处理函数中所有不需要的参数</span><br>                copy = <span class="hljs-built_in">dict</span>()<br>                <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> self._named_kw_args:<br>                    <span class="hljs-keyword">if</span> name <span class="hljs-keyword">in</span> kw:<br>                        copy[name] = kw[name]<br>                kw = copy<br>            <span class="hljs-comment"># check named arg: 检查关键字参数的名字是否和match_info中的重复</span><br>            <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> request.match_info.items():<br>                <span class="hljs-keyword">if</span> k <span class="hljs-keyword">in</span> kw:<br>                    logging.warning(<span class="hljs-string">&#x27;Duplicate arg name in named arg and kw args: %s&#x27;</span> % k)<br>                kw[k] = v<br>        <span class="hljs-keyword">if</span> self._has_request_arg:<br>            kw[<span class="hljs-string">&#x27;request&#x27;</span>] = request<br>        <span class="hljs-comment"># check required kw: 检查是否有必须关键字参数</span><br>        <span class="hljs-keyword">if</span> self._required_kw_args:<br>            <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> self._required_kw_args:<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name <span class="hljs-keyword">in</span> kw:<br>                    <span class="hljs-keyword">return</span> web.HTTPBadRequest(<span class="hljs-string">&#x27;Missing argument: %s&#x27;</span> % name)<br>        <span class="hljs-comment"># 以上代码均是为了获取调用参数</span><br>        logging.info(<span class="hljs-string">&#x27;call with args: %s&#x27;</span> % <span class="hljs-built_in">str</span>(kw))<br>        <span class="hljs-keyword">try</span>:<br>            r = <span class="hljs-keyword">await</span> self._func(**kw)<br>            <span class="hljs-keyword">return</span> r<br>        <span class="hljs-keyword">except</span> APIError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(error=e.error, data=e.data, message=e.message)<br><br><br><span class="hljs-comment"># 添加CSS等静态文件所在路径</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_static</span>(<span class="hljs-params">app</span>):</span><br>    path = os.path.join(os.path.dirname(os.path.abspath(__file__)), <span class="hljs-string">&#x27;static&#x27;</span>)<br>    app.router.add_static(<span class="hljs-string">&#x27;/static/&#x27;</span>, path)<br>    logging.info(<span class="hljs-string">&#x27;add static %s =&gt; %s&#x27;</span> % (<span class="hljs-string">&#x27;/static/&#x27;</span>, path))<br><br><span class="hljs-comment">#用来注册一个URL处理函数，主要用来验证函数是否有包含URL的响应方法与路径信息，以及将函数变为协程。</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_route</span>(<span class="hljs-params">app, fn</span>):</span><br>    method = <span class="hljs-built_in">getattr</span>(fn, <span class="hljs-string">&#x27;__method__&#x27;</span>, <span class="hljs-literal">None</span>)<br>    path = <span class="hljs-built_in">getattr</span>(fn, <span class="hljs-string">&#x27;__route__&#x27;</span>, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">if</span> path <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> method <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;@get or @post not defined in %s.&#x27;</span> % <span class="hljs-built_in">str</span>(fn))<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> asyncio.iscoroutinefunction(fn) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> inspect.isgeneratorfunction(fn):<br>        fn = asyncio.coroutine(fn)<br>    logging.info(<span class="hljs-string">&#x27;add route %s %s =&gt; %s(%s)&#x27;</span> % (method, path, fn.__name__,<br>                                                <span class="hljs-string">&#x27;, &#x27;</span>.join(inspect.signature(fn).parameters.keys())))<br>    <span class="hljs-comment"># 正式注册为对应的url处理函数</span><br>    <span class="hljs-comment"># RequestHandler类的实例是一个可以call的函数</span><br>    <span class="hljs-comment"># 自省函数 &#x27;__call__&#x27;</span><br>    app.router.add_route(method, path, RequestHandler(app, fn))<br><br><span class="hljs-comment">#可以批量注册的函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_routes</span>(<span class="hljs-params">app, module_name</span>):</span><br>    n = module_name.rfind(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> n == (-<span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># __import__ 作用同import语句，但__import__是一个函数，并且只接收字符串作为参数,</span><br>        <span class="hljs-comment"># 其实import语句就是调用这个函数进行导入工作的, 其返回值是对应导入模块的引用</span><br>        <span class="hljs-comment"># __import__(&#x27;os&#x27;,globals(),locals(),[&#x27;path&#x27;,&#x27;pip&#x27;]) ,等价于from os import path, pip</span><br>        mod = <span class="hljs-built_in">__import__</span>(module_name, <span class="hljs-built_in">globals</span>(), <span class="hljs-built_in">locals</span>())<br>    <span class="hljs-keyword">else</span>:<br>        name = module_name[n+<span class="hljs-number">1</span>:]<br>        mod = <span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">__import__</span>(module_name[:n], <span class="hljs-built_in">globals</span>(), <span class="hljs-built_in">locals</span>(), [name]), name)<br>    <span class="hljs-keyword">for</span> attr <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(mod):<br>        <span class="hljs-keyword">if</span> attr.startswith(<span class="hljs-string">&#x27;_&#x27;</span>):<br>            <span class="hljs-keyword">continue</span><br>        fn = <span class="hljs-built_in">getattr</span>(mod, attr)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">callable</span>(fn):<br>            method = <span class="hljs-built_in">getattr</span>(fn, <span class="hljs-string">&#x27;__method__&#x27;</span>, <span class="hljs-literal">None</span>)<br>            path = <span class="hljs-built_in">getattr</span>(fn, <span class="hljs-string">&#x27;__route__&#x27;</span>, <span class="hljs-literal">None</span>)<br>            <span class="hljs-keyword">if</span> method <span class="hljs-keyword">and</span> path:<br>                add_route(app, fn)<br></code></pre></td></tr></table></figure><p>之后，要在主程序app.py的初始化函数init()中添加middleware、jinja2模板和自注册的支持</p><h2 id="4-2应用初始化"><a href="#4-2应用初始化" class="headerlink" title="4.2应用初始化"></a>4.2应用初始化</h2><blockquote><p>middleware是一种<strong>拦截器</strong>，一个URL在被某个函数处理前，可以经过一系列的middleware的处理。</p><p>请求对象request的处理工序流水线先后依次是：<br>     logger_factory-&gt;response_factory-&gt;RequestHandler().<strong>call</strong>-&gt;get或post-&gt;handler<br>对应的响应对象response的处理工序流水线先后依次是:<br>由handler构造出要返回的具体对象，然后在这个返回的对象上加上’<strong>method</strong>‘和’<strong>route</strong>‘属性，以标识别这个对象并使接下来的程序容易处理<br>RequestHandler目的就是从请求对象request的请求content中获取必要的参数，调用URL处理函数,然后把结果返回给response_factory<br>response_factory在拿到经过处理后的对象，经过一系列类型判断，构造出正确web.Response对象，以正确的方式返回给客户端</p></blockquote><p>实现功能</p><blockquote><p>初始化jinja模板、输出request请求方法及路径、将URL处理函数返回值转化为<code>web.response</code>对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改app.py</span><br><span class="hljs-keyword">import</span> logging;<br><br><span class="hljs-keyword">import</span> orm<br><span class="hljs-keyword">from</span> config <span class="hljs-keyword">import</span> configs<br><br>logging.basicConfig(level=logging.INFO)<br><span class="hljs-keyword">from</span> coroweb <span class="hljs-keyword">import</span> add_routes, add_static<br><span class="hljs-keyword">from</span> aiohttp <span class="hljs-keyword">import</span> web<br><span class="hljs-comment"># FileSystemLoader是文件系统加载器，用来加载模板路径</span><br><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Environment, FileSystemLoader<br><span class="hljs-keyword">import</span> asyncio, os, json, time<br><span class="hljs-keyword">from</span> aiohttp <span class="hljs-keyword">import</span> web<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_jinja2</span>(<span class="hljs-params">app, **kw</span>):</span><br>    logging.info(<span class="hljs-string">&#x27;init jinja2...&#x27;</span>)<br>    options = <span class="hljs-built_in">dict</span>(<br>        <span class="hljs-comment"># 自动转义xml/html的特殊字符</span><br>        autoescape=kw.get(<span class="hljs-string">&#x27;autoescape&#x27;</span>, <span class="hljs-literal">True</span>),<br>        <span class="hljs-comment"># 代码块的开始结束标志</span><br>        block_start_string=kw.get(<span class="hljs-string">&#x27;block_start_string&#x27;</span>, <span class="hljs-string">&#x27;&#123;%&#x27;</span>),<br>        block_end_string=kw.get(<span class="hljs-string">&#x27;block_end_string&#x27;</span>, <span class="hljs-string">&#x27;%&#125;&#x27;</span>),<br>        <span class="hljs-comment"># 变量的开始结束标志</span><br>        variable_start_string=kw.get(<span class="hljs-string">&#x27;variable_start_string&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#123;&#x27;</span>),<br>        variable_end_string=kw.get(<span class="hljs-string">&#x27;variable_end_string&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>),<br>        <span class="hljs-comment"># 当模板文件被修改后，下次请求加载该模板文件的时候会自动重新加载修改后的模板文件</span><br>        auto_reload=kw.get(<span class="hljs-string">&#x27;auto_reload&#x27;</span>, <span class="hljs-literal">True</span>)<br>    )<br>    <span class="hljs-comment"># 获取模板文件的位置</span><br>    path = kw.get(<span class="hljs-string">&#x27;path&#x27;</span>, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">if</span> path <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        path = os.path.join(os.path.dirname(os.path.abspath(__file__)), <span class="hljs-string">&#x27;templates&#x27;</span>)<br>    logging.info(<span class="hljs-string">&#x27;set jinja2 template path : %s&#x27;</span> % path)<br>    <span class="hljs-comment"># Environment是jinjia2中的一个核心类，它的实例用来保存配置、全局对象以及模板文件的路径</span><br>    env = Environment(loader=FileSystemLoader(path), **options)<br>    <span class="hljs-comment"># filters: 一个字典描述的filters过滤器集合, 如果非模板被加载的时候, 可以安全的添加或较早的移除.</span><br>    filters = kw.get(<span class="hljs-string">&#x27;filters&#x27;</span>, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">if</span> filters <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">for</span> name, f <span class="hljs-keyword">in</span> filters.items():<br>            env.filters[name] = f<br>    <span class="hljs-comment"># 所有的一切是为了给app添加__templating__字段</span><br>    <span class="hljs-comment"># 前面将jinja2的环境配置都赋值给env了，这里再把env存入app的dict中，这样app就知道要到哪儿去找模板，怎么解析模板。</span><br>    app[<span class="hljs-string">&#x27;__templating__&#x27;</span>] = env<br><br><br><span class="hljs-comment"># 这个函数的作用就是当有http请求的时候，通过logging.info输出请求的信息，其中包括请求的方法和路径</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logger_factory</span>(<span class="hljs-params">app, handler</span>):</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logger</span>(<span class="hljs-params">request</span>):</span><br>        logging.info(<span class="hljs-string">&#x27;Request: %s %s&#x27;</span> % (request.method, request.path))<br>        <span class="hljs-comment"># handler为处理函数，request为参数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> handler(request)<br><br>    <span class="hljs-keyword">return</span> logger<br><br><br><span class="hljs-comment"># 函数返回值转化为`web.response`对象</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">response_factory</span>(<span class="hljs-params">app, handler</span>):</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">response</span>(<span class="hljs-params">request</span>):</span><br>        logging.info(<span class="hljs-string">&#x27;Response handler...&#x27;</span>)<br>        r = <span class="hljs-keyword">await</span> handler(request)<br>        logging.info(<span class="hljs-string">&#x27;response result = %s&#x27;</span> % <span class="hljs-built_in">str</span>(r))<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(r, web.StreamResponse):<br>            <span class="hljs-keyword">return</span> r<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(r, <span class="hljs-built_in">bytes</span>):<br>            resp = web.Response(body=r)<br>            resp.content_type = <span class="hljs-string">&#x27;application/octet-stream&#x27;</span><br>            <span class="hljs-keyword">return</span> resp<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(r, <span class="hljs-built_in">str</span>):<br>            <span class="hljs-keyword">if</span> r.startswith(<span class="hljs-string">&#x27;redirect:&#x27;</span>):<br>                <span class="hljs-keyword">return</span> web.HTTPFound(r[<span class="hljs-number">9</span>:])<br>            resp = web.Response(body=r.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>            resp.content_type = <span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span><br>            <span class="hljs-keyword">return</span> resp<br>        <span class="hljs-comment"># 大多数返回的是dict</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(r, <span class="hljs-built_in">dict</span>):<br>            template = r.get(<span class="hljs-string">&#x27;__template__&#x27;</span>)<br>            <span class="hljs-keyword">if</span> template <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                resp = web.Response(body=json.dumps(r, ensure_ascii=<span class="hljs-literal">False</span>,<br>                                                    default=<span class="hljs-keyword">lambda</span> o: o.__dict__).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>                resp.content_type = <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span><br>                <span class="hljs-keyword">return</span> resp<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 对模板进行渲染</span><br>                <span class="hljs-comment">#r[&#x27;__user__&#x27;] = request.__user__</span><br>                resp = web.Response(body=app[<span class="hljs-string">&#x27;__templating__&#x27;</span>].get_template(template).render(**r).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>                resp.content_type = <span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span><br>                <span class="hljs-keyword">return</span> resp<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(r, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">and</span> <span class="hljs-number">600</span> &gt; r &gt;= <span class="hljs-number">100</span>:<br>            <span class="hljs-keyword">return</span> web.Response(r)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(r, <span class="hljs-built_in">tuple</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(r) == <span class="hljs-number">2</span>:<br>            status_code, description = r<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(status_code, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">and</span> <span class="hljs-number">600</span> &gt; status_code &gt;= <span class="hljs-number">100</span>:<br>                <span class="hljs-keyword">return</span> web.Response(status=status_code, text=<span class="hljs-built_in">str</span>(description))<br>        <span class="hljs-comment"># default:</span><br>        resp = web.Response(body=<span class="hljs-built_in">str</span>(r).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        resp.content_type = <span class="hljs-string">&#x27;text/plain;charset=utf-8&#x27;</span><br>        <span class="hljs-keyword">return</span> resp<br><br>    <span class="hljs-keyword">return</span> response<br><br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init</span>(<span class="hljs-params">loop</span>):</span><br>    <span class="hljs-keyword">await</span> orm.create_pool(loop=loop, **configs.db)<br>    app = web.Application(loop=loop, middlewares=[<br>        logger_factory, response_factory<br>    ])<br>    init_jinja2(app)<br>    add_routes(app, <span class="hljs-string">&#x27;handlers&#x27;</span>)<br>    add_static(app)<br>    srv = <span class="hljs-keyword">await</span> loop.create_server(app.make_handler(), <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">9000</span>)  <span class="hljs-comment"># 监听IP + port</span><br>    logging.info(<span class="hljs-string">&#x27;server started at http://127.0.0.1:9000...&#x27;</span>)<br>    <span class="hljs-keyword">return</span> srv<br><br><br><span class="hljs-comment"># 获取eventloop</span><br>loop = asyncio.get_event_loop()<br><span class="hljs-comment"># 然后加入运行事件</span><br>loop.run_until_complete(init(loop))<br>loop.run_forever()<br></code></pre></td></tr></table></figure><h1 id="5、编写配置文件"><a href="#5、编写配置文件" class="headerlink" title="5、编写配置文件"></a>5、编写配置文件</h1><p>参考链接：</p><blockquote><p>通常，一个Web App在运行时都需要读取配置文件，比如<strong>数据库</strong>的用户名、口令等，在不同的<strong>环境</strong>中运行时，Web App可以通过读取不同的配置文件来获得正确的配置。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Default configurations.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>configs = &#123;<br>    <span class="hljs-string">&#x27;debug&#x27;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&#x27;db&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;host&#x27;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>        <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">3306</span>,<br>        <span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;www-data&quot;</span>,<br>        <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;www-data&quot;</span>,<br>        <span class="hljs-string">&quot;db&quot;</span>: <span class="hljs-string">&#x27;myblog&#x27;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;session&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-string">&#x27;MyBlog&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>config_override.py，用来覆盖某些默认设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Override configurations.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>configs = &#123;<br>    <span class="hljs-string">&#x27;db&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;host&#x27;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>应用程序读取配置文件需要优先从config_override.py读取。为了简化读取配置文件，可以把所有配置读取到统一的config.py中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Configuration</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> config_default<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dict</span>(<span class="hljs-params"><span class="hljs-built_in">dict</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    simple but support access as x.y style.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, names=(<span class="hljs-params"></span>), values=(<span class="hljs-params"></span>), **kw</span>):</span><br>        <span class="hljs-built_in">super</span>(<span class="hljs-type">Dict</span>, self).__init__(**kw)<br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(names, values):<br>            self[k] = v<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> self[key]<br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">r&quot;&#x27;Dict&#x27; object has no attribute like &#x27;%s&#x27;&quot;</span> % key)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__setattr__</span>(<span class="hljs-params">self, key, value</span>):</span><br>        self[key] = value<br><br><br><span class="hljs-comment">#将default和override中的配置合并，最终以override为准</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span>(<span class="hljs-params">defaults, override</span>):</span><span class="hljs-comment">#收集参数</span><br>    r = &#123;&#125;<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> defaults.items():<br>        <span class="hljs-keyword">if</span> k <span class="hljs-keyword">in</span> override:<span class="hljs-comment"># 如果覆盖文件有此参数</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(v, <span class="hljs-built_in">dict</span>):<span class="hljs-comment"># 判断是否其value为dict</span><br>                r[k] = merge(v, override[k]) <span class="hljs-comment"># 是的话，则创建新的字典后，调用原函数（递归）</span><br>            <span class="hljs-keyword">else</span>:<br>                r[k] = override[k] <span class="hljs-comment"># 否则把覆盖配置文件的值导入</span><br>        <span class="hljs-keyword">else</span>:<br>            r[k] = v <span class="hljs-comment"># 如果覆盖文件没有，就继续使用默认值</span><br>    <span class="hljs-keyword">return</span> r<br><br><span class="hljs-comment"># 增加x.y的取值功能</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">toDict</span>(<span class="hljs-params">d</span>):</span><br>    D = <span class="hljs-type">Dict</span>()<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> d.items():<br>        D[k] = toDict(v) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(v, <span class="hljs-built_in">dict</span>) <span class="hljs-keyword">else</span> v<br>    <span class="hljs-keyword">return</span> D<br><br>configs = config_default.configs<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">import</span> config_override<br>    configs = merge(configs, config_override.configs)<br><span class="hljs-keyword">except</span> ImportError:<br>    <span class="hljs-keyword">pass</span><br><br>configs = toDict(configs)<br><br></code></pre></td></tr></table></figure><h1 id="6、编写MVC"><a href="#6、编写MVC" class="headerlink" title="6、编写MVC"></a>6、编写MVC</h1><p>参考链接：</p><blockquote><p>MVC：Model-View-Controller,中文名“模型-视图-控制器”。<br>Controller主要负责业务逻辑，如检查用户名是否存在，取出用户信息等；PythonURL处理函数就是控制器<br>View主要负责显示逻辑，通过一些简单的替换变量，View生成最终看到的HTML，实质是HTML模板<br>Model主要负责传参给View，在View替换变量的时候，就可以从Model中取出相应的数据。</p></blockquote><p>测试运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&#x27; url handlers &#x27;</span><br><br><span class="hljs-keyword">import</span> re, time, json, logging, hashlib, base64, asyncio<br><br><span class="hljs-keyword">from</span> coroweb <span class="hljs-keyword">import</span> get, post<br><br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> User, Comment, Blog, next_id<br><br><span class="hljs-meta">@get(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">request</span>):</span><br>    users = <span class="hljs-keyword">await</span> User.findAll()<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;__template__&#x27;</span>: <span class="hljs-string">&#x27;test.html&#x27;</span>,<br>        <span class="hljs-string">&#x27;users&#x27;</span>: users<br>    &#125;<br></code></pre></td></tr></table></figure><p>test.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Test users - Awesome Python Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>All users<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    &#123;% for u in users %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; u.name &#125;&#125; / &#123;&#123; u.email &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：将jinja2初始化中以下代码注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#r[&#x27;__user__&#x27;] = request.__user__</span><br></code></pre></td></tr></table></figure><p>运行app.py后，通过localhost:9000/可以正常访问</p><p><strong>代码解析：</strong></p><p><a href="https://github.com/Ah-yuan/MyWebAPP">Ah-yuan/MyWebAPP: python项目实战解析 (github.com)</a></p><p><strong>参考链接：</strong></p><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">Python教程</a></p><p><a href="https://github.com/cuizichenghome/MyWebAPP">Python教程项目实战代码注释</a></p><p><a href="https://blog.csdn.net/josephpai/category_7049397.html">Python实战</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python实战(廖雪峰)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python实战-廖雪峰-代码解析（一）</title>
    <link href="/archives/6fc316e5.html"/>
    <url>/archives/6fc316e5.html</url>
    
    <content type="html"><![CDATA[<h1 id="1、搭建Web-App的骨架"><a href="#1、搭建Web-App的骨架" class="headerlink" title="1、搭建Web App的骨架"></a>1、搭建Web App的骨架</h1><blockquote><p>采用异步IO模式，利用aiohttp提供的框架创建了一个简单的服务器，监听9000端口的HTTP请求，这是最基本的操作，后续工作都将在这个服务器上进行。</p></blockquote><p>须实现的功能</p><blockquote><p>一直监听端口、基本的网页显示</p></blockquote><p>编写app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging; logging.basicConfig(level=logging.INFO)<br><br><span class="hljs-keyword">import</span> asyncio, os, json, time<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">from</span> aiohttp <span class="hljs-keyword">import</span> web<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">request</span>):</span><span class="hljs-comment">#可以看到这里返回的是html的源码，后续会将html源码放到文件夹中，使用链接方式引用</span><br>    <span class="hljs-keyword">return</span> web.Response(body=<span class="hljs-string">b&#x27;&lt;h1&gt;Awesome&lt;/h1&gt;&#x27;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init</span>(<span class="hljs-params">loop</span>):</span><br>    app = web.Application(loop=loop)<br>    app.router.add_route(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>, index) <span class="hljs-comment">#对于首页的 / 请求进行相应，响应方法为上面的index</span><br>    srv = <span class="hljs-keyword">await</span> loop.create_server(app.make_handler(), <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">9000</span>)<span class="hljs-comment">#监听IP + port</span><br>    logging.info(<span class="hljs-string">&#x27;server started at http://127.0.0.1:9000...&#x27;</span>)<br>    <span class="hljs-keyword">return</span> srv<br><br><span class="hljs-comment"># 获取eventloop</span><br>loop = asyncio.get_event_loop()<br><span class="hljs-comment"># 然后加入运行事件</span><br>loop.run_until_complete(init(loop))<br>loop.run_forever()<br></code></pre></td></tr></table></figure><h1 id="2、编写ORM操作数据库"><a href="#2、编写ORM操作数据库" class="headerlink" title="2、编写ORM操作数据库"></a>2、编写ORM操作数据库</h1><p>参考链接</p><p><strong>ORM的概念：</strong></p><blockquote><p>对象关系映射（Object Relational Mapping），用于实现面向对象编程语言里不同类型系统的数据之间的转换 。从效果上说，它其实是创建了一个可在编程语言里使用的–“虚拟对象数据库”。映射这个词用在这里非常恰当，ORM就是我们在程序代码中所操作的对象和数据库中的数据之间的一种映射关系，有了这个映射关系，我们再操作对象就相当于操作数据库。这样的特点和Java中的DAO层（数据访问层）可以说非常的相似。</p></blockquote><p><strong>ORM的目的：</strong></p><blockquote><p>实现用面向对象的形式对数据库进行操作。把一张表映射为一个类，一行数据就是一个实例。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">面向对象简而言之：可以通过实例初始化、实例.属性或实例.方法（）的方式操作实例<br><span class="hljs-meta">#</span><span class="bash"> 创建实例:</span><br>user = User(id=123, name=&#x27;Michael&#x27;)<br><span class="hljs-meta">#</span><span class="bash"> 存入数据库:</span><br>user.insert()<br><span class="hljs-meta">#</span><span class="bash"> 查询所有User对象:</span><br>users = User.findAll()<br></code></pre></td></tr></table></figure><p><strong>数据库的操作流程：</strong></p><blockquote><p>创建数据库的连接、游标对象； 执行SQL语句； 处理异常;</p></blockquote><p>需要实现的功能：</p><blockquote><p>数据库操作：创建连接池、销毁连接池、select语句、除select外的语句、</p><p>数据表与定义的类关联起来：定义字段属性、定义元类（控制Model对象的创建）、定义基类；</p><p>基类中须实现：根据WHERE条件查找、返回整数的根据WHERE条件查找，适用于<code>select count(*)</code>类型的SQL、依据关键字查找、保存、更新、删除；</p><p>其他：log信息打印、sql语句中的占位符；</p></blockquote><p>编写orm.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio, logging<br><span class="hljs-keyword">import</span> aiomysql<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">log</span>(<span class="hljs-params">sql, args=(<span class="hljs-params"></span>)</span>):</span>      <span class="hljs-comment">#将我们所需要了解的信息打印到log中，便于调试</span><br>    logging.info(<span class="hljs-string">&#x27;SQL: %s&#x27;</span> % sql)<br><br><span class="hljs-comment"># 创建连接池,每个http请求都从连接池连接到数据库</span><br><span class="hljs-comment"># 使用连接池的好处是不必频繁地打开和关闭数据库连接，而是能复用就尽量复用。</span><br><span class="hljs-comment"># 连接池由全局变量__pool存储，缺省情况下将编码设置为utf8，自动提交事务</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_pool</span>(<span class="hljs-params">loop, **kw</span>):</span><br>    logging.info(<span class="hljs-string">&#x27;create database connection pool...&#x27;</span>)<br>    <span class="hljs-keyword">global</span> __pool<br>    __pool = <span class="hljs-keyword">await</span> aiomysql.create_pool(<br>        host=kw.get(<span class="hljs-string">&#x27;host&#x27;</span>, <span class="hljs-string">&#x27;localhost&#x27;</span>),<br>        port=kw.get(<span class="hljs-string">&#x27;port&#x27;</span>, <span class="hljs-number">3306</span>),<br>        user=kw[<span class="hljs-string">&#x27;user&#x27;</span>],<br>        password=kw[<span class="hljs-string">&#x27;password&#x27;</span>],<br>        db=kw[<span class="hljs-string">&#x27;db&#x27;</span>],<br>        charset=kw.get(<span class="hljs-string">&#x27;charset&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>),<br>        autocommit=kw.get(<span class="hljs-string">&#x27;autocommit&#x27;</span>, <span class="hljs-literal">True</span>),<br>        maxsize=kw.get(<span class="hljs-string">&#x27;maxsize&#x27;</span>, <span class="hljs-number">10</span>),<br>        minsize=kw.get(<span class="hljs-string">&#x27;minsize&#x27;</span>, <span class="hljs-number">1</span>),<br>        loop=loop<br>    )<br><br><span class="hljs-comment"># 销毁连接池</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">destory_pool</span>():</span><br>    <span class="hljs-keyword">global</span> __pool<br>    <span class="hljs-keyword">if</span> __pool <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        __pool.close()<br>        <span class="hljs-keyword">await</span> __pool.wait_closed()<br><br><span class="hljs-comment"># select语句</span><br><span class="hljs-comment"># SQL语句的占位符是?，而MySQL的占位符是%s，select()函数在内部自动替换。注意要始终坚持使用带参数的SQL，而不是自己拼接SQL字符串，这样可以防止SQL注入攻击。</span><br><span class="hljs-comment"># 使用Cursor对象执行select语句时，通过featchall()可以拿到结果集。如果传入size，则拿到指定数量的结果集。结果集是一个list，每个元素都是一个tuple，对应一行记录。</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">select</span>(<span class="hljs-params">sql, args, size=<span class="hljs-literal">None</span></span>):</span><br>    log(sql, args)<br>    <span class="hljs-keyword">global</span> __pool<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> __pool.get() <span class="hljs-keyword">as</span> conn:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> conn.cursor(aiomysql.DictCursor) <span class="hljs-keyword">as</span> cur:<br>            <span class="hljs-keyword">await</span> cur.execute(sql.replace(<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;%s&#x27;</span>), args <span class="hljs-keyword">or</span> ())<br>            <span class="hljs-keyword">if</span> size:<br>                rs = <span class="hljs-keyword">await</span> cur.fetchmany(size)<br>            <span class="hljs-keyword">else</span>:<br>                rs = <span class="hljs-keyword">await</span> cur.fetchall()<br>        logging.info(<span class="hljs-string">&#x27;rows returned: %s&#x27;</span> % <span class="hljs-built_in">len</span>(rs))<br>        <span class="hljs-keyword">return</span> rs<br><span class="hljs-comment"># insert,update,deleta语句</span><br><span class="hljs-comment"># 使用Cursor对象执行insert，update，delete语句时，执行结果由rowcount返回影响的行数，就可以拿到执行结果</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">execute</span>(<span class="hljs-params">sql, args, autocommit=<span class="hljs-literal">True</span></span>):</span><br>    log(sql)<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> __pool.get() <span class="hljs-keyword">as</span> conn:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> autocommit:<br>            <span class="hljs-keyword">await</span> conn.begin()<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> conn.cursor(aiomysql.DictCursor) <span class="hljs-keyword">as</span> cur:<br>                <span class="hljs-keyword">await</span> cur.execute(sql.replace(<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;%s&#x27;</span>), args)<br>                affected = cur.rowcount<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> autocommit:<br>                <span class="hljs-keyword">await</span> conn.commit()<br>        <span class="hljs-keyword">except</span> BaseException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> autocommit:<br>                <span class="hljs-keyword">await</span> conn.rollback()<br>            <span class="hljs-keyword">raise</span><br>        <span class="hljs-keyword">finally</span>:<br>            conn.close()<br>        <span class="hljs-keyword">return</span> affected<br><br><br><span class="hljs-comment"># 用于输出**元类**中创建sql_insert语句中的占位符</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_args_string</span>(<span class="hljs-params">num</span>):</span><br>    l = []<br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        l.append(<span class="hljs-string">&#x27;?&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;, &#x27;</span>.join(l)<br><br><br><span class="hljs-comment"># 定义Field类，负责保存(数据库)表的字段名和字段类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Field</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, colunm_type, primary_key, default</span>):</span><br>        self.name = name<br>        self.colunm_type = colunm_type<br>        self.primary_key = primary_key<br>        self.default = default<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;%s, %s, %s&gt;&#x27;</span> % (self.__class__.__name__, self.colunm_type, self.name)<br><br><span class="hljs-comment"># 以下每一种Field分别代表数据库中一种不同的数据属性</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringField</span>(<span class="hljs-params">Field</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, primary_key=<span class="hljs-literal">False</span>, default=<span class="hljs-literal">None</span>, ddl=<span class="hljs-string">&#x27;varchar(100)&#x27;</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, ddl, primary_key, default)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BooleanField</span>(<span class="hljs-params">Field</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, default=<span class="hljs-literal">False</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, <span class="hljs-string">&#x27;boolean&#x27;</span>, <span class="hljs-literal">False</span>, default)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerField</span>(<span class="hljs-params">Field</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, primary_key=<span class="hljs-literal">False</span>, default=<span class="hljs-number">0</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, <span class="hljs-string">&#x27;bigint&#x27;</span>, primary_key, default)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FloatField</span>(<span class="hljs-params">Field</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, primary_key=<span class="hljs-literal">False</span>, default=<span class="hljs-number">0.0</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, <span class="hljs-string">&#x27;real&#x27;</span>, primary_key, default)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TextField</span>(<span class="hljs-params">Field</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, default=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, <span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-literal">False</span>, default)<br><br><br><span class="hljs-comment">#定义元类，控制Model对象的创建</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModelMetaclass</span>(<span class="hljs-params"><span class="hljs-built_in">type</span></span>):</span><br>    <span class="hljs-comment"># 调用__init__方法前会调用__new__方法</span><br>    <span class="hljs-comment"># 1.当前准备创建的类的对象  2.类的名字 3.类继承的父类集合 4.类的方法集合</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span>(<span class="hljs-params">cls, name, bases, attrs</span>):</span><br>        <span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;Model&#x27;</span>:      <span class="hljs-comment">#排除掉对Model类（基类）的修改</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>.__new__(cls, name, bases, attrs)<br>        <span class="hljs-comment"># 如果没设置__table__属性，tablename就是类的名字</span><br>        tableName = attrs.get(<span class="hljs-string">&#x27;__table__&#x27;</span>, <span class="hljs-literal">None</span>) <span class="hljs-keyword">or</span> name<br>        logging.info(<span class="hljs-string">&#x27;found model: %s (table: %s)&#x27;</span> % (name, tableName))<br>        mappings = &#123;&#125;    <span class="hljs-comment">#保存映射关系</span><br>        fields = []      <span class="hljs-comment">#保存除主键外的属性</span><br>        primarykey = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># 键是列名，值是field子类</span><br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> attrs.items():<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(v, Field):<br>                logging.info(<span class="hljs-string">&#x27;  found mapping: %s ==&gt; %s&#x27;</span> % (k, v))<br>                <span class="hljs-comment"># 把键值对存入mapping字典中</span><br>                mappings[k] = v<br>                <span class="hljs-keyword">if</span> v.primary_key:<br>                    <span class="hljs-comment">#找到主键</span><br>                    <span class="hljs-keyword">if</span> primarykey:<br>                        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Duplicate primary key for field: %s&#x27;</span> % k)<br>                    primarykey = k  <span class="hljs-comment">#此列设为列表的主键</span><br>                <span class="hljs-keyword">else</span>:<br>                    fields.append(k)  <span class="hljs-comment">#保存除主键外的属性</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> primarykey:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Primary key not found.&#x27;</span>)<br>        <span class="hljs-comment"># 删除类属性</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> mappings.keys():<br>            attrs.pop(k)  <span class="hljs-comment">#从类属性中删除Field属性,否则，容易造成运行时错误（实例的属性会遮盖类的同名属性）</span><br>        <span class="hljs-comment"># 保存除主键外的属性名为``（运算出字符串）列表形式</span><br>        escaped_fields = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> f: <span class="hljs-string">&#x27;`%s`&#x27;</span> % f, fields))<br>        attrs[<span class="hljs-string">&#x27;__mappings__&#x27;</span>] = mappings  <span class="hljs-comment"># 保存属性和列的映射关系</span><br>        attrs[<span class="hljs-string">&#x27;__table__&#x27;</span>] = tableName  <span class="hljs-comment"># 表的名字</span><br>        attrs[<span class="hljs-string">&#x27;__primary_key__&#x27;</span>] = primarykey  <span class="hljs-comment"># 主键属性名</span><br>        attrs[<span class="hljs-string">&#x27;__fields__&#x27;</span>] = fields  <span class="hljs-comment"># 除主键外的属性名</span><br>        <span class="hljs-comment"># 反引号和repr()函数功能一致</span><br>        attrs[<span class="hljs-string">&#x27;__select__&#x27;</span>] = <span class="hljs-string">&#x27;select `%s`, %s from `%s`&#x27;</span> % (primarykey, <span class="hljs-string">&#x27;, &#x27;</span>.join(escaped_fields), tableName)<br>        attrs[<span class="hljs-string">&#x27;__insert__&#x27;</span>] = <span class="hljs-string">&#x27;insert into `%s` (%s, `%s`) values (%s)&#x27;</span> % (<br>        tableName, <span class="hljs-string">&#x27;, &#x27;</span>.join(escaped_fields), primarykey, create_args_string(<span class="hljs-built_in">len</span>(escaped_fields) + <span class="hljs-number">1</span>))<br>        attrs[<span class="hljs-string">&#x27;__update__&#x27;</span>] = <span class="hljs-string">&#x27;update `%s` set %s where `%s`=?&#x27;</span> % (<br>        tableName, <span class="hljs-string">&#x27;, &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> f: <span class="hljs-string">&#x27;`%s`=?&#x27;</span> % (mappings.get(f).name <span class="hljs-keyword">or</span> f), fields)), primarykey)<br>        attrs[<span class="hljs-string">&#x27;__delete__&#x27;</span>] = <span class="hljs-string">&#x27;delete from `%s` where `%s`=?&#x27;</span> % (tableName, primarykey)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>.__new__(cls, name, bases, attrs)<br><br><span class="hljs-comment">#***基类***Model</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span>(<span class="hljs-params"><span class="hljs-built_in">dict</span>, metaclass=ModelMetaclass</span>):</span>    <span class="hljs-comment">#在参数处即指定了所依赖的元类</span><br>    <span class="hljs-comment">#也可在此处写  __metaclass__ = ModelMetaclass，与参数处效果相同</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, **kw</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(**kw)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> self[key]<br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">r&quot;&#x27;Model&#x27; object has no attribute &#x27;%s&#x27;&quot;</span> % key)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__setattr__</span>(<span class="hljs-params">self, key, value</span>):</span><br>        self[key] = value<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getValue</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-comment">#返回对象的属性,如果没有对应属性则会调用__getattr__</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(self, key, <span class="hljs-literal">None</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getValueOrDefault</span>(<span class="hljs-params">self, key</span>):</span><br>        value = <span class="hljs-built_in">getattr</span>(self, key, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">if</span> value <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            field = self.__mappings__[key]<br>            <span class="hljs-keyword">if</span> field.default <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                value = field.default() <span class="hljs-keyword">if</span> <span class="hljs-built_in">callable</span>(field.default) <span class="hljs-keyword">else</span> field.default<br>                logging.debug(<span class="hljs-string">&#x27;using default value for %s: %s&#x27;</span> % (key, <span class="hljs-built_in">str</span>(value)))<br>                <span class="hljs-comment"># 把默认属性设置进去</span><br>                <span class="hljs-built_in">setattr</span>(self, key, value)<br>        <span class="hljs-keyword">return</span> value<br><br><br>    <span class="hljs-comment"># 类方法的第一个参数是cls,而实例方法的第一个参数是self</span><br><span class="hljs-meta">    @classmethod</span><br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findAll</span>(<span class="hljs-params">cls, where=<span class="hljs-literal">None</span>, args=<span class="hljs-literal">None</span>, **kw</span>):</span><br>        <span class="hljs-string">&#x27; find objects by where clause. &#x27;</span><br>        sql = [cls.__select__]<br>        <span class="hljs-keyword">if</span> where:<br>            sql.append(<span class="hljs-string">&#x27;where&#x27;</span>)<br>            sql.append(where)<br>        <span class="hljs-keyword">if</span> args <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            args = []<br>        orderBy = kw.get(<span class="hljs-string">&#x27;orderBy&#x27;</span>, <span class="hljs-literal">None</span>)<span class="hljs-comment"># 语句中是否有orderBy参数</span><br>        <span class="hljs-keyword">if</span> orderBy:<br>            sql.append(<span class="hljs-string">&#x27;order by&#x27;</span>)<br>            sql.append(orderBy)<br>        limit = kw.get(<span class="hljs-string">&#x27;limit&#x27;</span>, <span class="hljs-literal">None</span>)<span class="hljs-comment"># 语句中是否有limit参数</span><br>        <span class="hljs-keyword">if</span> limit <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            sql.append(<span class="hljs-string">&#x27;limit&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(limit, <span class="hljs-built_in">int</span>):<br>                sql.append(<span class="hljs-string">&#x27;?&#x27;</span>)<br>                args.append(limit)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(limit, <span class="hljs-built_in">tuple</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(limit) == <span class="hljs-number">2</span>:<br>                sql.append(<span class="hljs-string">&#x27;?, ?&#x27;</span>)<br>                args.extend(limit)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Invalid limit value: %s&#x27;</span> % <span class="hljs-built_in">str</span>(limit))<br>        rs = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> select(<span class="hljs-string">&#x27; &#x27;</span>.join(sql), args)<br>        <span class="hljs-keyword">return</span> [cls(**r) <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> rs]<br><br><span class="hljs-meta">    @classmethod</span><br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findNumber</span>(<span class="hljs-params">cls, selectedField, where=<span class="hljs-literal">None</span>, args=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-string">&#x27; find number by select and where. &#x27;</span><br>        <span class="hljs-comment"># 将列名重命名为_num_，任何客户端都可以按照这个名称引用这个列，就像它是个实际的列一样</span><br>        sql = [<span class="hljs-string">&#x27;select %s _num_ from `%s`&#x27;</span> % (selectedField, cls.__table__)]<br>        <span class="hljs-keyword">if</span> where:<br>            sql.append(<span class="hljs-string">&#x27;where&#x27;</span>)<br>            sql.append(where)<br>        <span class="hljs-comment"># 限制结果数量为1</span><br>        rs = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> select(<span class="hljs-string">&#x27; &#x27;</span>.join(sql), args, <span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 1.将rs[0]转换成关键字参数元组，rs[0]为dict</span><br>        <span class="hljs-comment"># 2.通过&lt;class &#x27;__main__.User&#x27;&gt;(位置参数元组)，产生一个实例对象</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rs) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> rs[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;_num_&#x27;</span>]<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find</span>(<span class="hljs-params">cls, pk</span>):</span><br>        <span class="hljs-string">&#x27; find object by primary key. &#x27;</span><br>        rs = <span class="hljs-keyword">await</span> select(<span class="hljs-string">&#x27;%s where `%s`=?&#x27;</span> % (cls.__select__, cls.__primary_key__), [pk], <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rs) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> cls(**rs[<span class="hljs-number">0</span>])<br><br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span>(<span class="hljs-params">self</span>):</span><br>        args = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(self.getValueOrDefault, self.__fields__))<br>        args.append(self.getValueOrDefault(self.__primary_key__))<br>        rows = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> execute(self.__insert__, args)<br>        <span class="hljs-keyword">if</span> rows != <span class="hljs-number">1</span>:<br>            logging.warn(<span class="hljs-string">&#x27;failed to insert record: affected rows: %s&#x27;</span> % rows)<br><br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>(<span class="hljs-params">self</span>):</span><br>        args = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(self.getValue, self.__fields__))<br>        args.append(self.getValue(self.__primary_key__))<br>        rows = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> execute(self.__update__, args)<br>        <span class="hljs-keyword">if</span> rows != <span class="hljs-number">1</span>:<br>            logging.warn(<span class="hljs-string">&#x27;failed to update by primary key: affected rows: %s&#x27;</span> % rows)<br><br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span>(<span class="hljs-params">self</span>):</span><br>        args = [self.getValue(self.__primary_key__)]<br>        rows = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> execute(self.__delete__, args)<br>        <span class="hljs-keyword">if</span> rows != <span class="hljs-number">1</span>:<br>            logging.warn(<span class="hljs-string">&#x27;failed to remove by primary key: affected rows: %s&#x27;</span> % rows)<br></code></pre></td></tr></table></figure><h1 id="3、编写MODEL"><a href="#3、编写MODEL" class="headerlink" title="3、编写MODEL"></a>3、编写MODEL</h1><p>参考链接：</p><blockquote><p>在ORM模块里我们编写了Model类，是一个基类，定义了一些基本的类方法。这次要写的Model是对昨天的Model再加工。</p></blockquote><p>须实现的功能</p><blockquote><p>定义User、Blog、Comment三个类与数据库表一一对应</p></blockquote><p>编写models.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time, uuid<br><br><span class="hljs-keyword">from</span> orm <span class="hljs-keyword">import</span> Model, StringField, BooleanField, FloatField, TextField<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next_id</span>():</span>  <span class="hljs-comment">#定义随机生成id的方法，生成唯一标识符</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;%015d%s000&#x27;</span> % (<span class="hljs-built_in">int</span>(time.time()*<span class="hljs-number">1000</span>), uuid.uuid4().<span class="hljs-built_in">hex</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>(<span class="hljs-params">Model</span>):</span><br>    __table__ = <span class="hljs-string">&#x27;users&#x27;</span><br><span class="hljs-comment"># 后面的id,email等会被实例的id,email覆盖</span><br>    <span class="hljs-built_in">id</span>=StringField(primary_key=<span class="hljs-literal">True</span>, default=next_id, ddl=<span class="hljs-string">&#x27;varchar(50)&#x27;</span>)<br>    email = StringField(ddl=<span class="hljs-string">&#x27;varchar(50)&#x27;</span>)<br>    passwd = StringField(ddl=<span class="hljs-string">&#x27;varchar(50)&#x27;</span>)<br>    admin = BooleanField()<br>    name = StringField(ddl=<span class="hljs-string">&#x27;varchar(50)&#x27;</span>)<br>    image = StringField(ddl=<span class="hljs-string">&#x27;varchar(500)&#x27;</span>)<br>    created_at = FloatField(default=time.time)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Blog</span>(<span class="hljs-params">Model</span>):</span><br>    __table__ = <span class="hljs-string">&#x27;blogs&#x27;</span><br><br>    <span class="hljs-built_in">id</span> = StringField(primary_key=<span class="hljs-literal">True</span>, default=next_id, ddl=<span class="hljs-string">&#x27;varchar(50)&#x27;</span>)<br>    user_id = StringField(ddl=<span class="hljs-string">&#x27;varchar(50)&#x27;</span>)<br>    user_name = StringField(ddl=<span class="hljs-string">&#x27;varchar(50)&#x27;</span>)<br>    user_image = StringField(ddl=<span class="hljs-string">&#x27;varchar(500)&#x27;</span>)<br>    name = StringField(ddl=<span class="hljs-string">&#x27;varchar(50)&#x27;</span>)<br>    summary = StringField(ddl=<span class="hljs-string">&#x27;varchar(200)&#x27;</span>)<br>    content = TextField()<br>    created_at = FloatField(default=time.time)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Comment</span>(<span class="hljs-params">Model</span>):</span><br>    __table__ = <span class="hljs-string">&#x27;comments&#x27;</span><br><br>    <span class="hljs-built_in">id</span> = StringField(primary_key=<span class="hljs-literal">True</span>, default=next_id, ddl=<span class="hljs-string">&#x27;varchar(50)&#x27;</span>)<br>    blog_id = StringField(ddl=<span class="hljs-string">&#x27;varchar(50)&#x27;</span>)<br>    user_id = StringField(ddl=<span class="hljs-string">&#x27;varchar(50)&#x27;</span>)<br>    user_name = StringField(ddl=<span class="hljs-string">&#x27;varchar(50)&#x27;</span>)<br>    user_image = StringField(ddl=<span class="hljs-string">&#x27;varchar(500)&#x27;</span>)<br>    content = TextField()<br>    created_at = FloatField(default=time.time)<br></code></pre></td></tr></table></figure><p>测试能否通过Model操作对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> orm<br><span class="hljs-comment">#测试部分</span><br><span class="hljs-keyword">if</span> __name__== <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span><br>        <span class="hljs-keyword">await</span> orm.create_pool(loop,user=<span class="hljs-string">&#x27;www-data&#x27;</span>, password=<span class="hljs-string">&#x27;www-data&#x27;</span>, db=<span class="hljs-string">&#x27;awesome&#x27;</span>)<br>        u = User(name=<span class="hljs-string">&#x27;Test&#x27;</span>, email=<span class="hljs-string">&#x27;test@example.com&#x27;</span>, passwd=<span class="hljs-string">&#x27;123456780&#x27;</span>, image=<span class="hljs-string">&#x27;about:blank&#x27;</span>)<br>        <span class="hljs-keyword">await</span> u.save()<br>        a = <span class="hljs-keyword">await</span> u.findAll() <span class="hljs-comment">#这个要打印才显示出来</span><br>        <span class="hljs-built_in">print</span>(a)<br><br>    loop = asyncio.get_event_loop()<br>    loop.run_until_complete(test())<br>    orm.__pool.close()  <span class="hljs-comment">#在关闭event loop之前，首先需要关闭连接池。</span><br>    loop.run_until_complete(orm.__pool.wait_closed())<span class="hljs-comment">#在关闭event loop之前，首先需要关闭连接池。</span><br>    loop.close()<br></code></pre></td></tr></table></figure><p>测试结果输出如下：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[&#123;<span class="hljs-symbol">&#x27;id</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;00162858233058916dc6a94ffda491dbd64e2359d6ae106000</span>&#x27;, <span class="hljs-symbol">&#x27;email</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;tast@example.com</span>&#x27;, <span class="hljs-symbol">&#x27;passwd</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;123456780</span>&#x27;, <span class="hljs-symbol">&#x27;admin</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-number">0</span>, <span class="hljs-symbol">&#x27;name</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;Test</span>&#x27;, <span class="hljs-symbol">&#x27;image</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;about:blank</span>&#x27;, <span class="hljs-symbol">&#x27;created_at</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-number">1628582330.58906</span>&#125;]<br></code></pre></td></tr></table></figure><p><strong>代码解析：</strong></p><p><a href="https://github.com/Ah-yuan/MyWebAPP">Ah-yuan/MyWebAPP: python项目实战解析 (github.com)</a></p><p><strong>参考链接：</strong></p><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">Python教程</a></p><p><a href="https://github.com/cuizichenghome/MyWebAPP">Python教程项目实战代码注释</a></p><p><a href="https://blog.csdn.net/josephpai/category_7049397.html">Python实战</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python实战(廖雪峰)</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
