<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>编写ORM操作数据库</title>
    <link href="/2021/08/12/%E7%BC%96%E5%86%99ORM%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2021/08/12/%E7%BC%96%E5%86%99ORM%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="编写ORM操作数据库"><a href="#编写ORM操作数据库" class="headerlink" title="编写ORM操作数据库"></a>编写ORM操作数据库</h1><p><strong>ORM的概念：</strong></p><blockquote><p>对象关系映射（Object Relational Mapping），用于实现面向对象编程语言里不同类型系统的数据之间的转换 。从效果上说，它其实是创建了一个可在编程语言里使用的–“虚拟对象数据库”。映射这个词用在这里非常恰当，ORM就是我们在程序代码中所操作的对象和数据库中的数据之间的一种映射关系，有了这个映射关系，我们再操作对象就相当于操作数据库。这样的特点和Java中的DAO层（数据访问层）可以说非常的相似。</p></blockquote><p><strong>ORM的目的：</strong></p><blockquote><p>实现用面向对象的形式对数据库进行操作。把一张表映射为一个类，一行数据就是一个实例。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">面向对象简而言之：可以通过实例初始化、实例.属性或实例.方法（）的方式操作实例<br><span class="hljs-meta">#</span><span class="bash"> 创建实例:</span><br>user = User(id=123, name=&#x27;Michael&#x27;)<br><span class="hljs-meta">#</span><span class="bash"> 存入数据库:</span><br>user.insert()<br><span class="hljs-meta">#</span><span class="bash"> 查询所有User对象:</span><br>users = User.findAll()<br></code></pre></td></tr></table></figure><p><strong>数据库的操作流程：</strong></p><blockquote><p>创建数据库的连接、游标对象； 执行SQL语句； 处理异常;</p></blockquote><p>需要实现的功能：</p><blockquote><p>数据库操作：创建连接池、销毁连接池、select语句、除select外的语句、</p><p>数据表与定义的类关联起来：定义字段属性、定义元类（控制Model对象的创建）、定义基类；</p><p>基类中须实现：根据WHERE条件查找、返回整数的根据WHERE条件查找，适用于<code>select count(*)</code>类型的SQL、依据关键字查找、保存、更新、删除；</p><p>其他：log信息打印、sql语句中的占位符；</p></blockquote><p>编写orm.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio, logging<br><span class="hljs-keyword">import</span> aiomysql<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">log</span>(<span class="hljs-params">sql, args=(<span class="hljs-params"></span>)</span>):</span>      <span class="hljs-comment">#将我们所需要了解的信息打印到log中，便于调试</span><br>    logging.info(<span class="hljs-string">&#x27;SQL: %s&#x27;</span> % sql)<br><br><span class="hljs-comment"># 创建连接池,每个http请求都从连接池连接到数据库</span><br><span class="hljs-comment"># 使用连接池的好处是不必频繁地打开和关闭数据库连接，而是能复用就尽量复用。</span><br><span class="hljs-comment"># 连接池由全局变量__pool存储，缺省情况下将编码设置为utf8，自动提交事务</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_pool</span>(<span class="hljs-params">loop, **kw</span>):</span><br>    logging.info(<span class="hljs-string">&#x27;create database connection pool...&#x27;</span>)<br>    <span class="hljs-keyword">global</span> __pool<br>    __pool = <span class="hljs-keyword">await</span> aiomysql.create_pool(<br>        host=kw.get(<span class="hljs-string">&#x27;host&#x27;</span>, <span class="hljs-string">&#x27;localhost&#x27;</span>),<br>        port=kw.get(<span class="hljs-string">&#x27;port&#x27;</span>, <span class="hljs-number">3306</span>),<br>        user=kw[<span class="hljs-string">&#x27;user&#x27;</span>],<br>        password=kw[<span class="hljs-string">&#x27;password&#x27;</span>],<br>        db=kw[<span class="hljs-string">&#x27;db&#x27;</span>],<br>        charset=kw.get(<span class="hljs-string">&#x27;charset&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>),<br>        autocommit=kw.get(<span class="hljs-string">&#x27;autocommit&#x27;</span>, <span class="hljs-literal">True</span>),<br>        maxsize=kw.get(<span class="hljs-string">&#x27;maxsize&#x27;</span>, <span class="hljs-number">10</span>),<br>        minsize=kw.get(<span class="hljs-string">&#x27;minsize&#x27;</span>, <span class="hljs-number">1</span>),<br>        loop=loop<br>    )<br><br><span class="hljs-comment"># 销毁连接池</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">destory_pool</span>():</span><br>    <span class="hljs-keyword">global</span> __pool<br>    <span class="hljs-keyword">if</span> __pool <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        __pool.close()<br>        <span class="hljs-keyword">await</span> __pool.wait_closed()<br><br><span class="hljs-comment"># select语句</span><br><span class="hljs-comment"># SQL语句的占位符是?，而MySQL的占位符是%s，select()函数在内部自动替换。注意要始终坚持使用带参数的SQL，而不是自己拼接SQL字符串，这样可以防止SQL注入攻击。</span><br><span class="hljs-comment"># 使用Cursor对象执行select语句时，通过featchall()可以拿到结果集。如果传入size，则拿到指定数量的结果集。结果集是一个list，每个元素都是一个tuple，对应一行记录。</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">select</span>(<span class="hljs-params">sql, args, size=<span class="hljs-literal">None</span></span>):</span><br>    log(sql, args)<br>    <span class="hljs-keyword">global</span> __pool<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> __pool.get() <span class="hljs-keyword">as</span> conn:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> conn.cursor(aiomysql.DictCursor) <span class="hljs-keyword">as</span> cur:<br>            <span class="hljs-keyword">await</span> cur.execute(sql.replace(<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;%s&#x27;</span>), args <span class="hljs-keyword">or</span> ())<br>            <span class="hljs-keyword">if</span> size:<br>                rs = <span class="hljs-keyword">await</span> cur.fetchmany(size)<br>            <span class="hljs-keyword">else</span>:<br>                rs = <span class="hljs-keyword">await</span> cur.fetchall()<br>        logging.info(<span class="hljs-string">&#x27;rows returned: %s&#x27;</span> % <span class="hljs-built_in">len</span>(rs))<br>        <span class="hljs-keyword">return</span> rs<br><span class="hljs-comment"># insert,update,deleta语句</span><br><span class="hljs-comment"># 使用Cursor对象执行insert，update，delete语句时，执行结果由rowcount返回影响的行数，就可以拿到执行结果</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">execute</span>(<span class="hljs-params">sql, args, autocommit=<span class="hljs-literal">True</span></span>):</span><br>    log(sql)<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> __pool.get() <span class="hljs-keyword">as</span> conn:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> autocommit:<br>            <span class="hljs-keyword">await</span> conn.begin()<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> conn.cursor(aiomysql.DictCursor) <span class="hljs-keyword">as</span> cur:<br>                <span class="hljs-keyword">await</span> cur.execute(sql.replace(<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;%s&#x27;</span>), args)<br>                affected = cur.rowcount<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> autocommit:<br>                <span class="hljs-keyword">await</span> conn.commit()<br>        <span class="hljs-keyword">except</span> BaseException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> autocommit:<br>                <span class="hljs-keyword">await</span> conn.rollback()<br>            <span class="hljs-keyword">raise</span><br>        <span class="hljs-keyword">finally</span>:<br>            conn.close()<br>        <span class="hljs-keyword">return</span> affected<br><br><br><span class="hljs-comment"># 用于输出**元类**中创建sql_insert语句中的占位符</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_args_string</span>(<span class="hljs-params">num</span>):</span><br>    l = []<br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        l.append(<span class="hljs-string">&#x27;?&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;, &#x27;</span>.join(l)<br><br><br><span class="hljs-comment"># 定义Field类，负责保存(数据库)表的字段名和字段类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Field</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, colunm_type, primary_key, default</span>):</span><br>        self.name = name<br>        self.colunm_type = colunm_type<br>        self.primary_key = primary_key<br>        self.default = default<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;%s, %s, %s&gt;&#x27;</span> % (self.__class__.__name__, self.colunm_type, self.name)<br><br><span class="hljs-comment"># 以下每一种Field分别代表数据库中一种不同的数据属性</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringField</span>(<span class="hljs-params">Field</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, primary_key=<span class="hljs-literal">False</span>, default=<span class="hljs-literal">None</span>, ddl=<span class="hljs-string">&#x27;varchar(100)&#x27;</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, ddl, primary_key, default)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BooleanField</span>(<span class="hljs-params">Field</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, default=<span class="hljs-literal">False</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, <span class="hljs-string">&#x27;boolean&#x27;</span>, <span class="hljs-literal">False</span>, default)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerField</span>(<span class="hljs-params">Field</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, primary_key=<span class="hljs-literal">False</span>, default=<span class="hljs-number">0</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, <span class="hljs-string">&#x27;bigint&#x27;</span>, primary_key, default)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FloatField</span>(<span class="hljs-params">Field</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, primary_key=<span class="hljs-literal">False</span>, default=<span class="hljs-number">0.0</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, <span class="hljs-string">&#x27;real&#x27;</span>, primary_key, default)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TextField</span>(<span class="hljs-params">Field</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, default=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, <span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-literal">False</span>, default)<br><br><br><span class="hljs-comment">#定义元类，控制Model对象的创建</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModelMetaclass</span>(<span class="hljs-params"><span class="hljs-built_in">type</span></span>):</span><br>    <span class="hljs-comment"># 调用__init__方法前会调用__new__方法</span><br>    <span class="hljs-comment"># 1.当前准备创建的类的对象  2.类的名字 3.类继承的父类集合 4.类的方法集合</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span>(<span class="hljs-params">cls, name, bases, attrs</span>):</span><br>        <span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;Model&#x27;</span>:      <span class="hljs-comment">#排除掉对Model类（基类）的修改</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>.__new__(cls, name, bases, attrs)<br>        <span class="hljs-comment"># 如果没设置__table__属性，tablename就是类的名字</span><br>        tableName = attrs.get(<span class="hljs-string">&#x27;__table__&#x27;</span>, <span class="hljs-literal">None</span>) <span class="hljs-keyword">or</span> name<br>        logging.info(<span class="hljs-string">&#x27;found model: %s (table: %s)&#x27;</span> % (name, tableName))<br>        mappings = &#123;&#125;    <span class="hljs-comment">#保存映射关系</span><br>        fields = []      <span class="hljs-comment">#保存除主键外的属性</span><br>        primarykey = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># 键是列名，值是field子类</span><br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> attrs.items():<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(v, Field):<br>                logging.info(<span class="hljs-string">&#x27;  found mapping: %s ==&gt; %s&#x27;</span> % (k, v))<br>                <span class="hljs-comment"># 把键值对存入mapping字典中</span><br>                mappings[k] = v<br>                <span class="hljs-keyword">if</span> v.primary_key:<br>                    <span class="hljs-comment">#找到主键</span><br>                    <span class="hljs-keyword">if</span> primarykey:<br>                        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Duplicate primary key for field: %s&#x27;</span> % k)<br>                    primarykey = k  <span class="hljs-comment">#此列设为列表的主键</span><br>                <span class="hljs-keyword">else</span>:<br>                    fields.append(k)  <span class="hljs-comment">#保存除主键外的属性</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> primarykey:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Primary key not found.&#x27;</span>)<br>        <span class="hljs-comment"># 删除类属性</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> mappings.keys():<br>            attrs.pop(k)  <span class="hljs-comment">#从类属性中删除Field属性,否则，容易造成运行时错误（实例的属性会遮盖类的同名属性）</span><br>        <span class="hljs-comment"># 保存除主键外的属性名为``（运算出字符串）列表形式</span><br>        escaped_fields = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> f: <span class="hljs-string">&#x27;`%s`&#x27;</span> % f, fields))<br>        attrs[<span class="hljs-string">&#x27;__mappings__&#x27;</span>] = mappings  <span class="hljs-comment"># 保存属性和列的映射关系</span><br>        attrs[<span class="hljs-string">&#x27;__table__&#x27;</span>] = tableName  <span class="hljs-comment"># 表的名字</span><br>        attrs[<span class="hljs-string">&#x27;__primary_key__&#x27;</span>] = primarykey  <span class="hljs-comment"># 主键属性名</span><br>        attrs[<span class="hljs-string">&#x27;__fields__&#x27;</span>] = fields  <span class="hljs-comment"># 除主键外的属性名</span><br>        <span class="hljs-comment"># 反引号和repr()函数功能一致</span><br>        attrs[<span class="hljs-string">&#x27;__select__&#x27;</span>] = <span class="hljs-string">&#x27;select `%s`, %s from `%s`&#x27;</span> % (primarykey, <span class="hljs-string">&#x27;, &#x27;</span>.join(escaped_fields), tableName)<br>        attrs[<span class="hljs-string">&#x27;__insert__&#x27;</span>] = <span class="hljs-string">&#x27;insert into `%s` (%s, `%s`) values (%s)&#x27;</span> % (<br>        tableName, <span class="hljs-string">&#x27;, &#x27;</span>.join(escaped_fields), primarykey, create_args_string(<span class="hljs-built_in">len</span>(escaped_fields) + <span class="hljs-number">1</span>))<br>        attrs[<span class="hljs-string">&#x27;__update__&#x27;</span>] = <span class="hljs-string">&#x27;update `%s` set %s where `%s`=?&#x27;</span> % (<br>        tableName, <span class="hljs-string">&#x27;, &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> f: <span class="hljs-string">&#x27;`%s`=?&#x27;</span> % (mappings.get(f).name <span class="hljs-keyword">or</span> f), fields)), primarykey)<br>        attrs[<span class="hljs-string">&#x27;__delete__&#x27;</span>] = <span class="hljs-string">&#x27;delete from `%s` where `%s`=?&#x27;</span> % (tableName, primarykey)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>.__new__(cls, name, bases, attrs)<br><br><span class="hljs-comment">#***基类***Model</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span>(<span class="hljs-params"><span class="hljs-built_in">dict</span>, metaclass=ModelMetaclass</span>):</span>    <span class="hljs-comment">#在参数处即指定了所依赖的元类</span><br>    <span class="hljs-comment">#也可在此处写  __metaclass__ = ModelMetaclass，与参数处效果相同</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, **kw</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(**kw)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> self[key]<br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">r&quot;&#x27;Model&#x27; object has no attribute &#x27;%s&#x27;&quot;</span> % key)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__setattr__</span>(<span class="hljs-params">self, key, value</span>):</span><br>        self[key] = value<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getValue</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-comment">#返回对象的属性,如果没有对应属性则会调用__getattr__</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(self, key, <span class="hljs-literal">None</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getValueOrDefault</span>(<span class="hljs-params">self, key</span>):</span><br>        value = <span class="hljs-built_in">getattr</span>(self, key, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">if</span> value <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            field = self.__mappings__[key]<br>            <span class="hljs-keyword">if</span> field.default <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                value = field.default() <span class="hljs-keyword">if</span> <span class="hljs-built_in">callable</span>(field.default) <span class="hljs-keyword">else</span> field.default<br>                logging.debug(<span class="hljs-string">&#x27;using default value for %s: %s&#x27;</span> % (key, <span class="hljs-built_in">str</span>(value)))<br>                <span class="hljs-comment"># 把默认属性设置进去</span><br>                <span class="hljs-built_in">setattr</span>(self, key, value)<br>        <span class="hljs-keyword">return</span> value<br><br><br>    <span class="hljs-comment"># 类方法的第一个参数是cls,而实例方法的第一个参数是self</span><br><span class="hljs-meta">    @classmethod</span><br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findAll</span>(<span class="hljs-params">cls, where=<span class="hljs-literal">None</span>, args=<span class="hljs-literal">None</span>, **kw</span>):</span><br>        <span class="hljs-string">&#x27; find objects by where clause. &#x27;</span><br>        sql = [cls.__select__]<br>        <span class="hljs-keyword">if</span> where:<br>            sql.append(<span class="hljs-string">&#x27;where&#x27;</span>)<br>            sql.append(where)<br>        <span class="hljs-keyword">if</span> args <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            args = []<br>        orderBy = kw.get(<span class="hljs-string">&#x27;orderBy&#x27;</span>, <span class="hljs-literal">None</span>)<span class="hljs-comment"># 语句中是否有orderBy参数</span><br>        <span class="hljs-keyword">if</span> orderBy:<br>            sql.append(<span class="hljs-string">&#x27;order by&#x27;</span>)<br>            sql.append(orderBy)<br>        limit = kw.get(<span class="hljs-string">&#x27;limit&#x27;</span>, <span class="hljs-literal">None</span>)<span class="hljs-comment"># 语句中是否有limit参数</span><br>        <span class="hljs-keyword">if</span> limit <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            sql.append(<span class="hljs-string">&#x27;limit&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(limit, <span class="hljs-built_in">int</span>):<br>                sql.append(<span class="hljs-string">&#x27;?&#x27;</span>)<br>                args.append(limit)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(limit, <span class="hljs-built_in">tuple</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(limit) == <span class="hljs-number">2</span>:<br>                sql.append(<span class="hljs-string">&#x27;?, ?&#x27;</span>)<br>                args.extend(limit)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Invalid limit value: %s&#x27;</span> % <span class="hljs-built_in">str</span>(limit))<br>        rs = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> select(<span class="hljs-string">&#x27; &#x27;</span>.join(sql), args)<br>        <span class="hljs-keyword">return</span> [cls(**r) <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> rs]<br><br><span class="hljs-meta">    @classmethod</span><br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findNumber</span>(<span class="hljs-params">cls, selectedField, where=<span class="hljs-literal">None</span>, args=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-string">&#x27; find number by select and where. &#x27;</span><br>        <span class="hljs-comment"># 将列名重命名为_num_，任何客户端都可以按照这个名称引用这个列，就像它是个实际的列一样</span><br>        sql = [<span class="hljs-string">&#x27;select %s _num_ from `%s`&#x27;</span> % (selectedField, cls.__table__)]<br>        <span class="hljs-keyword">if</span> where:<br>            sql.append(<span class="hljs-string">&#x27;where&#x27;</span>)<br>            sql.append(where)<br>        <span class="hljs-comment"># 限制结果数量为1</span><br>        rs = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> select(<span class="hljs-string">&#x27; &#x27;</span>.join(sql), args, <span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 1.将rs[0]转换成关键字参数元组，rs[0]为dict</span><br>        <span class="hljs-comment"># 2.通过&lt;class &#x27;__main__.User&#x27;&gt;(位置参数元组)，产生一个实例对象</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rs) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> rs[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;_num_&#x27;</span>]<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find</span>(<span class="hljs-params">cls, pk</span>):</span><br>        <span class="hljs-string">&#x27; find object by primary key. &#x27;</span><br>        rs = <span class="hljs-keyword">await</span> select(<span class="hljs-string">&#x27;%s where `%s`=?&#x27;</span> % (cls.__select__, cls.__primary_key__), [pk], <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rs) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> cls(**rs[<span class="hljs-number">0</span>])<br><br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span>(<span class="hljs-params">self</span>):</span><br>        args = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(self.getValueOrDefault, self.__fields__))<br>        args.append(self.getValueOrDefault(self.__primary_key__))<br>        rows = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> execute(self.__insert__, args)<br>        <span class="hljs-keyword">if</span> rows != <span class="hljs-number">1</span>:<br>            logging.warn(<span class="hljs-string">&#x27;failed to insert record: affected rows: %s&#x27;</span> % rows)<br><br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>(<span class="hljs-params">self</span>):</span><br>        args = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(self.getValue, self.__fields__))<br>        args.append(self.getValue(self.__primary_key__))<br>        rows = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> execute(self.__update__, args)<br>        <span class="hljs-keyword">if</span> rows != <span class="hljs-number">1</span>:<br>            logging.warn(<span class="hljs-string">&#x27;failed to update by primary key: affected rows: %s&#x27;</span> % rows)<br><br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span>(<span class="hljs-params">self</span>):</span><br>        args = [self.getValue(self.__primary_key__)]<br>        rows = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> execute(self.__delete__, args)<br>        <span class="hljs-keyword">if</span> rows != <span class="hljs-number">1</span>:<br>            logging.warn(<span class="hljs-string">&#x27;failed to remove by primary key: affected rows: %s&#x27;</span> % rows)<br></code></pre></td></tr></table></figure><p><strong>参考链接：</strong></p><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">Python教程</a></p><p><a href="https://github.com/cuizichenghome/MyWebAPP">Python教程项目实战代码注释</a></p><p><a href="https://blog.csdn.net/josephpai/category_7049397.html">Python实战</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python实战(廖雪峰)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建Web App的骨架</title>
    <link href="/2021/08/11/%E6%90%AD%E5%BB%BAWeb-App%E7%9A%84%E9%AA%A8%E6%9E%B6/"/>
    <url>/2021/08/11/%E6%90%AD%E5%BB%BAWeb-App%E7%9A%84%E9%AA%A8%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建Web-App的骨架"><a href="#搭建Web-App的骨架" class="headerlink" title="搭建Web App的骨架"></a>搭建Web App的骨架</h1><blockquote><p>采用异步IO模式，利用aiohttp提供的框架创建了一个简单的服务器，监听9000端口的HTTP请求，这是最基本的操作，后续工作都将在这个服务器上进行。</p></blockquote><p>须实现的功能</p><blockquote><p>一直监听端口、基本的网页显示</p></blockquote><p>编写app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging; logging.basicConfig(level=logging.INFO)<br><br><span class="hljs-keyword">import</span> asyncio, os, json, time<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">from</span> aiohttp <span class="hljs-keyword">import</span> web<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">request</span>):</span><span class="hljs-comment">#可以看到这里返回的是html的源码，后续会将html源码放到文件夹中，使用链接方式引用</span><br>    <span class="hljs-keyword">return</span> web.Response(body=<span class="hljs-string">b&#x27;&lt;h1&gt;Awesome&lt;/h1&gt;&#x27;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init</span>(<span class="hljs-params">loop</span>):</span><br>    app = web.Application(loop=loop)<br>    app.router.add_route(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>, index) <span class="hljs-comment">#对于首页的 / 请求进行相应，响应方法为上面的index</span><br>    srv = <span class="hljs-keyword">await</span> loop.create_server(app.make_handler(), <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">9000</span>)<span class="hljs-comment">#监听IP + port</span><br>    logging.info(<span class="hljs-string">&#x27;server started at http://127.0.0.1:9000...&#x27;</span>)<br>    <span class="hljs-keyword">return</span> srv<br><br><span class="hljs-comment"># 获取eventloop</span><br>loop = asyncio.get_event_loop()<br><span class="hljs-comment"># 然后加入运行事件</span><br>loop.run_until_complete(init(loop))<br>loop.run_forever()<br></code></pre></td></tr></table></figure><p><strong>参考链接：</strong></p><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">Python教程</a></p><p><a href="https://github.com/cuizichenghome/MyWebAPP">Python教程项目实战代码注释</a></p><p><a href="https://blog.csdn.net/josephpai/category_7049397.html">Python实战</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python实战(廖雪峰)</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
